import{o as c,l as g}from"../../js/compatibilityStubs-scdl-DBF9jRnU.js";import"../../js/logger-scdl-C1suKzoJ.js";const r=console,o=document.getElementById("queue-container");let a=null;const m="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%23e0e0e0'/%3E%3Ctext x='50' y='55' font-size='20' text-anchor='middle' fill='%23aaa'%3E?%3C/text%3E%3C/svg%3E";function n(e){if(!o)return;if(e.length===0){o.innerHTML="<p>The download queue is currently empty.</p>";return}let s="";e.forEach(t=>{const d=t.artworkUrl||m,i=t.title||t.url?.split("/").pop()||"Untitled Track",l=t.progress!==void 0&&t.progress>=0&&t.progress<=100?t.progress:0;t.status==="processing"||t.status;const p=t.progress!==void 0&&t.progress<101;s+=`
            <div class="queue-item">
                <img src="${d}" alt="Artwork" class="queue-item-artwork" />
                <div class="queue-item-details">
                    <div class="queue-item-title" title="${i}">${i}</div>
                    <div class="queue-item-url" title="${t.url}">Type: ${t.type}</div>
                    <div class="queue-item-status">Status: <strong>${t.status}</strong></div>
                    ${p?`
                        <div class="queue-item-progress-container">
                            <span>Progress: ${t.progress?.toFixed(1)}%</span>
                            <progress value="${l}" max="100"></progress>
                        </div>
                    `:""}
                    ${t.error?`<div class="queue-item-error">Error: ${t.error}</div>`:""}
                    <div style="font-size: 0.8em; color: #888; margin-top: 5px;">Added: ${new Date(t.addedAt).toLocaleTimeString()} (ID: ${t.id.substring(0,8)})</div>
                </div>
            </div>
        `}),o.innerHTML=s}async function u(){r.log("[Popup] Requesting queue data from background...");try{const e=await g({type:"GET_QUEUE_DATA"});r.log("[Popup] Received raw data from sendMessageToBackend:",JSON.stringify(e,null,2)),Array.isArray(e)?(r.log("[Popup] Received queue data (is array):",e),n(e)):(r.error("[Popup] Received invalid queue data (not array) from background:",e),o&&(o.innerHTML="<p>Error: Could not load queue data (format error).</p>"))}catch(e){r.error("[Popup] Error requesting queue data:",e),o&&(o.innerHTML="<p>Error: Failed to connect to background script.</p>")}}c(async(e,s)=>(e&&e.type==="QUEUE_UPDATED_BROADCAST"&&Array.isArray(e.queuePayload)?(r.log("[Popup] Received QUEUE_UPDATED_BROADCAST from background:",e.queuePayload),n(e.queuePayload)):e&&Array.isArray(e)&&(r.log("[Popup] Received a direct array message (assumed queue update):",e),n(e)),!1)),document.addEventListener("DOMContentLoaded",()=>{r.log("Queue popup DOM loaded. Fetching initial queue and starting interval."),u(),a!==null&&clearInterval(a),a=window.setInterval(u,1e3);const e=document.getElementById("open-restore-history-page-button");e?e.addEventListener("click",()=>{r.log("[Popup] Opening Restore History page...");try{(typeof browser<"u"?browser.tabs:chrome.tabs).create({url:chrome.runtime.getURL("src/pages/restore_history.html")})}catch(s){if(r.error("[Popup] Error opening restore history page:",s),o){const t=document.createElement("p");t.textContent="Error: Could not open the restore history page. See console.",t.style.color="red",o.appendChild(t)}}}):r.warn("[Popup] 'Open Restore Page' button not found.")}),window.addEventListener("unload",()=>{a!==null&&(r.log("Queue popup unloading. Clearing update interval."),clearInterval(a),a=null)}),r.log("Queue popup script loaded.");
