{"version":3,"file":"repostBlocker.js","sources":["../../../src/repostBlocker.ts"],"sourcesContent":["import { Config } from \"./utils/config\";\nimport { Logger } from \"./utils/logger\";\nconst logger = Logger.create(\"Repost Blocker\");\n\nfunction isStreamUrl(url: URL) {\n  return url && url.hostname === \"api-v2.soundcloud.com\" && url.pathname === \"/stream\";\n}\n\nfunction getFromLocalStorage<TKey extends keyof Config>(key: TKey) {\n  const item = window.localStorage.getItem(\"SOUNDCLOUD-DL-\" + key);\n\n  return JSON.parse(item) as Config[TKey][\"value\"];\n}\n\nconst twentyDaysInSeconds = 864000;\n\nfunction filterReposts(collection: any[]) {\n  if (!collection) return [];\n\n  const nowTimestamp = new Date().getTime() / 1000;\n  const blockPlaylists = getFromLocalStorage(\"block-playlists\");\n  const followedArtistIds = getFromLocalStorage(\"followed-artists\") ?? [];\n  const filtered = [];\n\n  for (const item of collection) {\n    if (item.type === \"track-promoted\") continue;\n\n    if (item.type === \"track-repost\") {\n      // if a track has been reposted in the stream by a user it won't be shown afterwards\n      // so we show the track, if it is a repost of a artist we follow\n      if (!followedArtistIds.includes(item.track.user_id)) continue;\n\n      const trackCreatedAtTimestamp = new Date(item.track.created_at).getTime() / 1000;\n\n      if (nowTimestamp - trackCreatedAtTimestamp > twentyDaysInSeconds) continue;\n\n      item.type = \"track\";\n      item.user = item.track.user;\n      item.created_at = item.track.display_date;\n    }\n\n    if (blockPlaylists && item.type === \"playlist\") continue;\n\n    if (item.type === \"playlist-repost\") {\n      if (blockPlaylists) continue;\n\n      // if a playlist has been reposted in the stream by a user it won't be shown afterwards\n      // so we show the playlist, if it is a repost of a artist we follow\n      if (!followedArtistIds.includes(item.playlist.user_id)) continue;\n\n      const playlistCreatedAtTimestamp = new Date(item.playlist.created_at).getTime() / 1000;\n\n      if (nowTimestamp - playlistCreatedAtTimestamp > twentyDaysInSeconds) continue;\n\n      item.type = \"playlist\";\n      item.user = item.playlist.user;\n      item.created_at = item.playlist.display_date;\n    }\n\n    filtered.push(item);\n  }\n\n  return filtered;\n}\n\nfunction removeReposts(json: string) {\n  if (!json) return json;\n\n  const data = JSON.parse(json);\n\n  const filteredData = {\n    ...data,\n    collection: filterReposts(data.collection),\n  };\n\n  return JSON.stringify(filteredData);\n}\n\nconst originalSendMethod = XMLHttpRequest.prototype.send;\n\nfunction hijackedSendMethod(body: any) {\n  try {\n    if (this.__state) {\n      const url = new URL(this.__state.url);\n      const onload = this.onload;\n\n      if (onload && isStreamUrl(url)) {\n        this.onload = function (event: ProgressEvent) {\n          Object.defineProperty(this, \"responseText\", {\n            value: removeReposts(this.responseText),\n          });\n\n          onload.call(this, event);\n        };\n      }\n    }\n  } catch (error) {\n    logger.logError(\"Error in hijackedSendMethod:\", error);\n  }\n\n  return originalSendMethod.call(this, body);\n}\n\nXMLHttpRequest.prototype.send = hijackedSendMethod;\n\nObject.defineProperty(XMLHttpRequest.prototype, \"resetSend\", {\n  value: () => (XMLHttpRequest.prototype.send = originalSendMethod),\n});\n"],"names":[],"mappings":"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"}