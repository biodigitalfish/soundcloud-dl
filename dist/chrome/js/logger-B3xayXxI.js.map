{"version":3,"file":"logger-B3xayXxI.js","sources":["../../../src/utils/logger.ts"],"sourcesContent":["export enum LogLevel {\n  Debug = 0,\n  Information = 1,\n  Warning = 2,\n  Error = 3,\n  None = 4,\n}\n\nexport class Logger {\n  constructor(private source: string, private minLogLevel: LogLevel) { }\n\n  log(logLevel: LogLevel, message: string, ...args: any[]): void {\n    if (logLevel < this.minLogLevel) return;\n\n    const timestamp = `[${new Date().toJSON()}]`;\n    const source = `[SOUNDCLOUD-DL:${this.source}]`;\n\n    switch (logLevel) {\n      case LogLevel.Error:\n        console.error(timestamp, source, message, ...args);\n        break;\n      case LogLevel.Warning:\n        console.warn(timestamp, source, message, ...args);\n        break;\n      case LogLevel.Information:\n        console.info(timestamp, source, message, ...args);\n        break;\n      case LogLevel.Debug:\n        console.debug(timestamp, source, message, ...args);\n        break;\n    }\n  }\n\n  logDebug(message: string, ...args: any[]) {\n    // Check global debug setting from localStorage\n    try {\n      const debugEnabled = window.localStorage.getItem(\"SOUNDCLOUD-DL-debugLoggingEnabled\");\n      // Only log debug messages if the setting is explicitly \"true\"\n      // If it's missing or \"false\" or anything else, we disable debug logging.\n      if (debugEnabled !== \"true\") {\n        return; // Don't log debug messages if not explicitly enabled\n      }\n    } catch (e) {\n      // If localStorage access fails (e.g., in some contexts or if disabled), default to not logging debug.\n      console.warn(\"Logger: Failed to access localStorage for debug setting, disabling debug logs.\", e);\n      return;\n    }\n    // Proceed with logging if enabled and level allows\n    this.log(LogLevel.Debug, message, ...args);\n  }\n\n  logInfo(message: string, ...args: any[]) {\n    this.log(LogLevel.Information, message, ...args);\n  }\n\n  logWarn(message: string, ...args: any[]) {\n    this.log(LogLevel.Warning, message, ...args);\n  }\n\n  logError(message: string, ...args: any[]) {\n    this.log(LogLevel.Error, message, ...args);\n  }\n\n  static create(name: string, minLogLevel: LogLevel = LogLevel.Warning) {\n    return new Logger(name, minLogLevel);\n  }\n}\n"],"names":["LogLevel","Logger","source","minLogLevel","logLevel","message","args","timestamp","e","name"],"mappings":"AAAY,IAAAA,GAAAA,IACVA,EAAAA,EAAA,MAAQ,CAAR,EAAA,QACAA,EAAAA,EAAA,YAAc,CAAd,EAAA,cACAA,EAAAA,EAAA,QAAU,CAAV,EAAA,UACAA,EAAAA,EAAA,MAAQ,CAAR,EAAA,QACAA,EAAAA,EAAA,KAAO,CAAP,EAAA,OALUA,IAAAA,GAAA,CAAA,CAAA,EAQL,MAAMC,CAAO,CAClB,YAAoBC,EAAwBC,EAAuB,CAA/C,KAAA,OAAAD,EAAwB,KAAA,YAAAC,CAAA,CAE5C,IAAIC,EAAoBC,KAAoBC,EAAmB,CACzD,GAAAF,EAAW,KAAK,YAAa,OAEjC,MAAMG,EAAY,IAAI,IAAI,OAAO,OAAQ,CAAA,IACnCL,EAAS,kBAAkB,KAAK,MAAM,IAE5C,OAAQE,EAAU,CAChB,IAAK,GACH,QAAQ,MAAMG,EAAWL,EAAQG,EAAS,GAAGC,CAAI,EACjD,MACF,IAAK,GACH,QAAQ,KAAKC,EAAWL,EAAQG,EAAS,GAAGC,CAAI,EAChD,MACF,IAAK,GACH,QAAQ,KAAKC,EAAWL,EAAQG,EAAS,GAAGC,CAAI,EAChD,MACF,IAAK,GACH,QAAQ,MAAMC,EAAWL,EAAQG,EAAS,GAAGC,CAAI,EACjD,KAAA,CACJ,CAGF,SAASD,KAAoBC,EAAa,CAEpC,GAAA,CAIF,GAHqB,OAAO,aAAa,QAAQ,mCAAmC,IAG/D,OACnB,aAEKE,EAAG,CAEF,QAAA,KAAK,iFAAkFA,CAAC,EAChG,MAAA,CAGF,KAAK,IAAI,EAAgBH,EAAS,GAAGC,CAAI,CAAA,CAG3C,QAAQD,KAAoBC,EAAa,CACvC,KAAK,IAAI,EAAsBD,EAAS,GAAGC,CAAI,CAAA,CAGjD,QAAQD,KAAoBC,EAAa,CACvC,KAAK,IAAI,EAAkBD,EAAS,GAAGC,CAAI,CAAA,CAG7C,SAASD,KAAoBC,EAAa,CACxC,KAAK,IAAI,EAAgBD,EAAS,GAAGC,CAAI,CAAA,CAG3C,OAAO,OAAOG,EAAcN,EAAwB,EAAkB,CAC7D,OAAA,IAAIF,EAAOQ,EAAMN,CAAW,CAAA,CAEvC"}