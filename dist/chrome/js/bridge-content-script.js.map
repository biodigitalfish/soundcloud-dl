{"version":3,"file":"bridge-content-script.js","sources":["../../../src/bridge-content-script.ts"],"sourcesContent":["/**\n * This script acts as a bridge between the main page world (where content.js runs after injection)\n * and the extension's background script. It runs in the isolated content script world\n * and has access to chrome.runtime APIs.\n */\n\nconst SCRIPT_ID = \"soundcloud-dl-bridge\"; // For identifying messages\n\n// Listen for messages from the page (content.js)\nwindow.addEventListener(\"message\", (event) => {\n    // We only accept messages from ourselves\n    if (event.source !== window || !event.data || event.data.source !== SCRIPT_ID || event.data.direction !== \"to-background-via-bridge\") {\n        return;\n    }\n\n    const message = event.data.payload;\n    const originalMessageId = event.data.messageId; // Capture the messageId\n\n    if (message && message.type && originalMessageId) { // Basic validation + check for messageId\n        console.log(`[Bridge] Received from page for background (ID: ${originalMessageId}):`, message);\n        chrome.runtime.sendMessage(message, (response) => {\n            // Send response from background back to the page, including the original messageId\n            if (chrome.runtime.lastError) {\n                console.error(\"[Bridge] Error sending message to background or receiving response:\", chrome.runtime.lastError);\n                window.postMessage({\n                    source: SCRIPT_ID,\n                    direction: \"from-background-via-bridge\",\n                    payload: { error: chrome.runtime.lastError.message, originalMessage: message },\n                    messageId: originalMessageId // Include messageId in error response\n                }, \"*\");\n            } else {\n                console.log(`[Bridge] Received response from background for ID ${originalMessageId}, sending to page:`, response);\n                window.postMessage({\n                    source: SCRIPT_ID,\n                    direction: \"from-background-via-bridge\",\n                    payload: response,\n                    messageId: originalMessageId // Include the messageId in the success response\n                }, \"*\");\n            }\n        });\n    } else {\n        console.warn(\"[Bridge] Received message from page is invalid or missing messageId:\", event.data);\n    }\n});\n\n// Listen for messages from the background script (broadcasts/pushes)\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    // Ensure it's from our extension's background\n    if (sender.id === chrome.runtime.id && (!sender.tab)) { // sender.tab check ensures it's from background/popup\n        console.log(\"[Bridge] Received broadcast from background, sending to page:\", message);\n        // Broadcast messages don't have a specific messageId to correlate\n        window.postMessage({\n            source: SCRIPT_ID,\n            direction: \"from-background-via-bridge\",\n            payload: message,\n            // No messageId needed here as it wasn't a request-response\n        }, \"*\");\n    }\n    return false; // Indicate we are not sending an async response from this specific listener.\n});\n\nconsole.log(\"[SoundCloud DL] Bridge content script loaded and listening.\"); "],"names":[],"mappings":"AAMA,MAAM,SAAY,GAAA,sBAAA;AAGlB,MAAO,CAAA,gBAAA,CAAiB,SAAW,EAAA,CAAC,KAAU,KAAA;AAE1C,EAAA,IAAI,KAAM,CAAA,MAAA,KAAW,MAAU,IAAA,CAAC,KAAM,CAAA,IAAA,IAAQ,KAAM,CAAA,IAAA,CAAK,MAAW,KAAA,SAAA,IAAa,KAAM,CAAA,IAAA,CAAK,cAAc,0BAA4B,EAAA;AAClI,IAAA;AAAA;AAGJ,EAAM,MAAA,OAAA,GAAU,MAAM,IAAK,CAAA,OAAA;AAC3B,EAAM,MAAA,iBAAA,GAAoB,MAAM,IAAK,CAAA,SAAA;AAErC,EAAI,IAAA,OAAA,IAAW,OAAQ,CAAA,IAAA,IAAQ,iBAAmB,EAAA;AAC9C,IAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,gDAAA,EAAmD,iBAAiB,CAAA,EAAA,CAAA,EAAM,OAAO,CAAA;AAC7F,IAAA,MAAA,CAAO,OAAQ,CAAA,WAAA,CAAY,OAAS,EAAA,CAAC,QAAa,KAAA;AAE9C,MAAI,IAAA,MAAA,CAAO,QAAQ,SAAW,EAAA;AAC1B,QAAA,OAAA,CAAQ,KAAM,CAAA,qEAAA,EAAuE,MAAO,CAAA,OAAA,CAAQ,SAAS,CAAA;AAC7G,QAAA,MAAA,CAAO,WAAY,CAAA;AAAA,UACf,MAAQ,EAAA,SAAA;AAAA,UACR,SAAW,EAAA,4BAAA;AAAA,UACX,OAAA,EAAS,EAAE,KAAO,EAAA,MAAA,CAAO,QAAQ,SAAU,CAAA,OAAA,EAAS,iBAAiB,OAAQ,EAAA;AAAA,UAC7E,SAAW,EAAA;AAAA;AAAA,WACZ,GAAG,CAAA;AAAA,OACH,MAAA;AACH,QAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,kDAAA,EAAqD,iBAAiB,CAAA,kBAAA,CAAA,EAAsB,QAAQ,CAAA;AAChH,QAAA,MAAA,CAAO,WAAY,CAAA;AAAA,UACf,MAAQ,EAAA,SAAA;AAAA,UACR,SAAW,EAAA,4BAAA;AAAA,UACX,OAAS,EAAA,QAAA;AAAA,UACT,SAAW,EAAA;AAAA;AAAA,WACZ,GAAG,CAAA;AAAA;AACV,KACH,CAAA;AAAA,GACE,MAAA;AACH,IAAQ,OAAA,CAAA,IAAA,CAAK,sEAAwE,EAAA,KAAA,CAAM,IAAI,CAAA;AAAA;AAEvG,CAAC,CAAA;AAGD,MAAA,CAAO,QAAQ,SAAU,CAAA,WAAA,CAAY,CAAC,OAAA,EAAS,QAAQ,YAAiB,KAAA;AAEpE,EAAA,IAAI,OAAO,EAAO,KAAA,MAAA,CAAO,QAAQ,EAAO,IAAA,CAAC,OAAO,GAAM,EAAA;AAClD,IAAQ,OAAA,CAAA,GAAA,CAAI,iEAAiE,OAAO,CAAA;AAEpF,IAAA,MAAA,CAAO,WAAY,CAAA;AAAA,MACf,MAAQ,EAAA,SAAA;AAAA,MACR,SAAW,EAAA,4BAAA;AAAA,MACX,OAAS,EAAA;AAAA;AAAA,OAEV,GAAG,CAAA;AAAA;AAEV,EAAO,OAAA,KAAA;AACX,CAAC,CAAA;AAED,OAAA,CAAQ,IAAI,6DAA6D,CAAA"}