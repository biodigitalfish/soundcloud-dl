{"version":3,"file":"settings.js","sources":["../../../src/settings.ts"],"sourcesContent":["import { configKeys, loadConfiguration, storeConfigValue, getConfigValue, resetConfig } from \"./utils/config\";\nimport { Logger } from \"./utils/logger\";\nimport { eraseDownloadHistoryEntry } from \"./utils/browser\";\n\nconst logger = Logger.create(\"Settings\");\n\nasync function resetSettings(e: Event) {\n  e.preventDefault();\n\n  logger.logInfo(\"Resetting settings...\");\n\n  await resetConfig();\n\n  await restoreSettings();\n}\n\nasync function saveSettings(e: Event) {\n  e.preventDefault();\n\n  logger.logInfo(\"Saving settings...\");\n\n  const savePromises = [];\n  for (const configKey of configKeys) {\n    const elem = document.querySelector<HTMLInputElement>(`#${configKey}`);\n\n    if (elem === null) continue;\n\n    let value: string | number | boolean;\n\n    if (elem.type === \"checkbox\") {\n      value = elem.checked;\n    } else if (elem.type === \"number\") {\n      value = elem.valueAsNumber;\n      if (isNaN(value)) {\n        logger.logWarn(`Invalid number input for ${configKey}, skipping save.`);\n        continue;\n      }\n    } else {\n      value = elem.value;\n    }\n\n    savePromises.push(storeConfigValue(configKey, value));\n  }\n\n  await Promise.all(savePromises);\n\n  const saveButton = document.querySelector<HTMLButtonElement>(\"button[type='submit']\");\n  if (saveButton) {\n    const originalText = saveButton.textContent;\n    saveButton.textContent = \"Saved!\";\n    saveButton.disabled = true;\n    setTimeout(() => {\n      saveButton.textContent = originalText;\n      saveButton.disabled = false;\n    }, 1500);\n  }\n}\n\nasync function restoreSettings() {\n  logger.logInfo(\"Restoring settings...\");\n\n  try {\n    await loadConfiguration();\n    logger.logInfo(\"Configuration loaded.\");\n\n    for (const configKey of configKeys) {\n      const elem = document.querySelector<HTMLInputElement>(`#${configKey}`);\n\n      if (elem === null) continue;\n\n      const value = getConfigValue(configKey);\n      logger.logInfo(`Restoring key: ${configKey}, Value: ${JSON.stringify(value)} (Type: ${typeof value})`);\n\n      if (typeof value === \"boolean\") {\n        elem.checked = value;\n      } else if (typeof value === \"number\") {\n        elem.value = String(value);\n      } else if (typeof value === \"string\") {\n        elem.value = value;\n      } else {\n        logger.logWarn(`Unexpected type for config key ${configKey}: ${typeof value}`);\n        if (elem.type === \"checkbox\") elem.checked = false;\n        else elem.value = \"\";\n      }\n\n      const changeEvent = new Event(\"change\", { bubbles: false, cancelable: true });\n      elem.dispatchEvent(changeEvent);\n    }\n  } catch (error) {\n    logger.logError(\"Failed to restore settings!\", error);\n  }\n}\n\nconst downloadWithoutPromptElem = document.querySelector<HTMLInputElement>(\"#download-without-prompt\");\nconst defaultDownloadLocationElem = document.querySelector<HTMLInputElement>(\"#default-download-location\");\n\ndownloadWithoutPromptElem.onchange = (event: any) => {\n  defaultDownloadLocationElem.disabled = !event.target.checked;\n};\n\nconst blockReposts = document.querySelector<HTMLInputElement>(\"#block-reposts\");\nconst blockPlaylists = document.querySelector<HTMLInputElement>(\"#block-playlists\");\n\nblockReposts.onchange = (event: any) => {\n  if (!event.target.checked) blockPlaylists.checked = false;\n};\n\n// --- HLS Rate Limiting UI Logic Start ---\nconst enableHlsRateLimitingElem = document.querySelector<HTMLInputElement>(\"#enable-hls-rate-limiting\");\nconst hlsRateLimitDelayMsElem = document.querySelector<HTMLInputElement>(\"#hls-rate-limit-delay-ms\");\n\nenableHlsRateLimitingElem.onchange = (event: any) => {\n  hlsRateLimitDelayMsElem.disabled = !event.target.checked;\n};\n// --- HLS Rate Limiting UI Logic End ---\n\n// --- Clear Download History Logic Start ---\nconst clearHistoryButton = document.querySelector<HTMLButtonElement>(\"#clear-download-history\");\n\nasync function clearDownloadHistory() {\n  logger.logInfo(\"Clearing download history...\");\n\n  try {\n    // First, clear our internal history database\n    await storeConfigValue(\"track-download-history\", {});\n\n    // Now try to clear entries from Chrome's download history database\n    logger.logInfo(\"Attempting to clear browser download history for SoundCloud files...\");\n    // Option 1: Try to clear all .mp3/.m4a files from SoundCloud \n    const soundcloudRegexPattern = \"SoundCloud.*\\\\.(mp3|m4a|wav)$\";\n    eraseDownloadHistoryEntry(soundcloudRegexPattern);\n\n    // Option 2: Try a broader search for any audio files (fallback)\n    const audioRegexPattern = \"\\\\.(mp3|m4a|wav)$\";\n    eraseDownloadHistoryEntry(audioRegexPattern);\n\n    const originalText = clearHistoryButton.textContent;\n    clearHistoryButton.textContent = \"History Cleared!\";\n    clearHistoryButton.disabled = true;\n    setTimeout(() => {\n      clearHistoryButton.textContent = originalText;\n      clearHistoryButton.disabled = false;\n    }, 2000); // Keep disabled for 2 seconds\n  } catch (error) {\n    logger.logError(\"Failed to clear download history\", error);\n    clearHistoryButton.textContent = \"Error! See Console\";\n    clearHistoryButton.style.backgroundColor = \"#d30029\";\n    setTimeout(() => {\n      clearHistoryButton.textContent = \"Clear Download History\";\n      clearHistoryButton.style.backgroundColor = \"\";\n      clearHistoryButton.disabled = false;\n    }, 3000);\n  }\n}\n\nclearHistoryButton.addEventListener(\"click\", clearDownloadHistory);\n// --- Clear Download History Logic End ---\n\ndocument.addEventListener(\"DOMContentLoaded\", restoreSettings);\ndocument.querySelector(\"form\").addEventListener(\"submit\", saveSettings);\ndocument.querySelector(\"form\").addEventListener(\"reset\", resetSettings);\n"],"names":[],"mappings":"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"}