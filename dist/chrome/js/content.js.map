{"version":3,"file":"content.js","sources":["../../../src/utils/domObserver.ts","../../../src/content.ts"],"sourcesContent":["import { Logger } from \"./logger\";\n\nexport interface ObserverEvent {\n  name?: string;\n  selector: string;\n  callback: (node: Element) => void;\n}\n\nexport class DomObserver {\n  private observer: MutationObserver;\n  private events: ObserverEvent[] = [];\n  private unqiueNodeId: number = 0;\n  private logger: Logger;\n\n  constructor() {\n    this.observer = new MutationObserver((mutations) => mutations.forEach((mutation) => this.handleMutation(mutation)));\n    this.logger = Logger.create(\"Observer\");\n  }\n\n  start(node: Node) {\n    this.observer.observe(node, { subtree: true, attributes: true, childList: true });\n\n    this.logger.logDebug(\"Started\");\n  }\n\n  stop() {\n    this.observer.disconnect();\n\n    this.logger.logDebug(\"Stopped\");\n  }\n\n  addEvent(event: ObserverEvent) {\n    if (!event.selector) {\n      this.logger.logWarn(\"Selector was not specified\");\n\n      return;\n    }\n\n    if (!event.callback) {\n      this.logger.logWarn(\"Callback was not specified\");\n\n      return;\n    }\n\n    this.events.push(event);\n\n    this.logger.logDebug(\"Event added\", event);\n  }\n\n  removeEvent(name: string) {\n    this.events = this.events.filter((event) => event.name !== name);\n  }\n\n  private handleMutation(mutation: MutationRecord) {\n    const target = mutation.target;\n    const newNodes = mutation.addedNodes ?? [];\n\n    for (const event of this.events) {\n      if (newNodes.length > 0) {\n        this.handleNodes(newNodes, event);\n      } else if (mutation.type === \"attributes\") {\n        this.handleNodes([target], event, false);\n      }\n    }\n  }\n\n  private handleNodes(nodes: any[] | NodeList, event: ObserverEvent, recursive: boolean = true) {\n    if (!nodes) return;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if (this.matchesSelectors(node, event.selector)) {\n        // We only want to emmit an event once\n        if (node._id !== undefined) return;\n\n        node._id = ++this.unqiueNodeId;\n        event.callback(node);\n      }\n\n      if (recursive && node.childNodes?.length > 0) this.handleNodes(node.childNodes, event);\n    }\n  }\n\n  private matchesSelectors(element: any, selectors: string) {\n    return element && element instanceof HTMLElement && element.matches(selectors);\n  }\n}\n","import { DomObserver, ObserverEvent } from \"./utils/domObserver\";\nimport { Logger } from \"./utils/logger\";\nimport { sendMessageToBackend, onMessage, getPathFromExtensionFile } from \"./compatibilityStubs\";\nimport { registerConfigChangeHandler, loadConfiguration, setOnConfigValueChanged, configKeys, Config } from \"./utils/config\";\nimport { determineIfUrlIsSet } from \"./utils/browser\";\n\n// --- CSS for Range Modal ---\nconst modalCss = `\n  #scdl-range-modal {\n    display: none;\n    position: fixed;\n    z-index: 10000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0,0,0,0.6);\n  }\n  #scdl-range-modal-content {\n    background-color: #fefefe;\n    margin: 15% auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 80%;\n    max-width: 350px;\n    border-radius: 5px;\n    color: #333; /* Ensure text is visible */\n  }\n  #scdl-range-modal label {\n    display: block;\n    margin-bottom: 5px;\n  }\n  #scdl-range-modal input[type=\"number\"] {\n    width: 60px;\n    padding: 5px;\n    margin-bottom: 15px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n  }\n  #scdl-range-modal-actions button {\n    padding: 8px 15px;\n    margin-left: 10px;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n  }\n  #scdl-range-modal-download {\n    background-color: #ff5419;\n    color: white;\n  }\n  #scdl-range-modal-cancel {\n    background-color: #ccc;\n  }\n  #scdl-range-modal-error {\n    color: red;\n    font-size: 0.9em;\n    margin-top: 10px;\n    display: none; /* Hidden by default */\n  }\n  .sc-button-download {\n    transition: background-color 0.5s ease-out;\n  }\n`;\n// -------------------------\n\n// --- Modal HTML Structure ---\nlet modalElement: HTMLDivElement | null = null;\nfunction createModal() {\n  if (document.getElementById(\"scdl-range-modal\")) return;\n\n  const style = document.createElement(\"style\");\n  style.textContent = modalCss;\n  document.head.appendChild(style);\n\n  modalElement = document.createElement(\"div\");\n  modalElement.id = \"scdl-range-modal\";\n  modalElement.innerHTML = `\n    <div id=\"scdl-range-modal-content\">\n      <h4>Download Playlist Range</h4>\n      <label for=\"scdl-range-from\">From track:</label>\n      <input type=\"number\" id=\"scdl-range-from\" name=\"from\" min=\"1\" value=\"1\">\n      <label for=\"scdl-range-to\">To track:</label>\n      <input type=\"number\" id=\"scdl-range-to\" name=\"to\" min=\"1\" value=\"\"><br>\n      <small>(Leave \"To\" blank to download until the end)</small>\n      <div id=\"scdl-range-modal-error\"></div>\n      <div id=\"scdl-range-modal-actions\" style=\"text-align: right; margin-top: 15px;\">\n        <button id=\"scdl-range-modal-cancel\">Cancel</button>\n        <button id=\"scdl-range-modal-download\">Download Selection</button>\n      </div>\n    </div>\n  `;\n  document.body.appendChild(modalElement);\n\n  // Add listeners for the modal buttons\n  document.getElementById(\"scdl-range-modal-cancel\").addEventListener(\"click\", hideModal);\n  modalElement.addEventListener(\"click\", (e) => {\n    // Close if clicking outside the content\n    if (e.target === modalElement) {\n      hideModal();\n    }\n  });\n}\n\nfunction showModal(mainDownloadButton: HTMLButtonElement, onDownloadClick: (start: number, end: number | null) => void) {\n  if (!modalElement) createModal();\n\n  const fromInput = document.getElementById(\"scdl-range-from\") as HTMLInputElement;\n  const toInput = document.getElementById(\"scdl-range-to\") as HTMLInputElement;\n  const errorDiv = document.getElementById(\"scdl-range-modal-error\");\n\n  // Reset fields and error message\n  fromInput.value = \"1\";\n  toInput.value = \"\";\n  errorDiv.textContent = \"\";\n  errorDiv.style.display = \"none\";\n\n  // Remove previous listener and add new one to avoid duplicates / stale closures\n  const downloadBtn = document.getElementById(\"scdl-range-modal-download\");\n  const newDownloadBtn = downloadBtn.cloneNode(true) as HTMLButtonElement;\n  downloadBtn.parentNode.replaceChild(newDownloadBtn, downloadBtn);\n\n  newDownloadBtn.addEventListener(\"click\", () => {\n    const start = parseInt(fromInput.value, 10);\n    const endStr = toInput.value;\n    const end = endStr ? parseInt(endStr, 10) : null; // null means download to end\n\n    errorDiv.textContent = \"\"; // Clear previous error\n    errorDiv.style.display = \"none\";\n\n    if (isNaN(start) || start < 1) {\n      errorDiv.textContent = \"Invalid \\\"From\\\" number.\";\n      errorDiv.style.display = \"block\";\n      return;\n    }\n    if (end !== null && (isNaN(end) || end < start)) {\n      errorDiv.textContent = \"Invalid \\\"To\\\" number. Must be greater than or equal to \\\"From\\\".\";\n      errorDiv.style.display = \"block\";\n      return;\n    }\n\n    // Validation passed, call the provided handler\n    onDownloadClick(start, end);\n    hideModal();\n\n    // Trigger the main button's preparing state visually\n    setButtonText(mainDownloadButton, \"Preparing...\");\n    mainDownloadButton.style.cursor = \"default\";\n    mainDownloadButton.onclick = null;\n\n  });\n\n  modalElement.style.display = \"block\";\n}\n\nfunction hideModal() {\n  if (modalElement) {\n    modalElement.style.display = \"none\";\n  }\n}\n// -----------------------------\n\ninterface DownloadButton {\n  elem: HTMLButtonElement;\n  onClick: any;\n  state: \"Idle\" | \"Preparing\" | \"Downloading\" | \"Pausing\" | \"Paused\" | \"Resuming\" | \"Finishing\" | \"Downloaded\" | \"Error\";\n  resetTimer?: number;\n  originalUrl?: string; // Store the URL for resuming/pausing\n  lastProgressTime?: number; // Add timestamp for progress tracking\n  browserDownloadId?: number; // Store browser's numeric downloadId for matching\n}\n\ntype KeyedButtons = { [key: string]: DownloadButton & { resetTimer?: number } };\ntype OnButtonClicked = (downloadId: string) => Promise<any>;\n\nlet observer: DomObserver | null = null;\nconst logger = Logger.create(\"ContentScript\");\n\n// --- Wrapper for sendMessageToBackend to log messages ---\nconst originalSendMessageToBackend = sendMessageToBackend;\nconst loggedSendMessageToBackend = (message: any, callContext?: string): Promise<any> => {\n  let messageToLog = {};\n  try {\n    messageToLog = JSON.parse(JSON.stringify(message));\n  } catch (_e) {\n    messageToLog = { errorParsingMessage: true, originalType: message?.type };\n  }\n  logger.logDebug(`[ContentScript sendMessageToBackend CALLED [Context: ${callContext || \"Unknown\"}] Message:]`, messageToLog);\n\n  if (message && typeof message === \"object\") {\n    const typesRequiringId = [\"DOWNLOAD\", \"DOWNLOAD_SET\", \"DOWNLOAD_SET_RANGE\", \"PAUSE_DOWNLOAD\", \"RESUME_DOWNLOAD\"];\n    if (typesRequiringId.includes(message.type) && (!message.downloadId || message.downloadId === undefined || message.downloadId === \"undefined\")) {\n      const error = new Error(`CRITICAL: Prevented sending message with type ${message.type} and missing downloadId!`);\n      logger.logError(\"[ContentScript loggedSendMessageToBackend]\", error.message, { message: messageToLog, callContext });\n      return Promise.reject(error);\n    }\n    if (!message.timestamp) message.timestamp = Date.now();\n  }\n  return originalSendMessageToBackend(message);\n};\n// --- End Wrapper ---\n\nconst downloadButtons: KeyedButtons = {};\n\nconst setButtonText = (button: HTMLButtonElement, text: string, title?: string) => {\n  button.innerText = text;\n\n  button.title = title ?? text;\n};\n\nconst resetButtonBackground = (button: HTMLButtonElement) => {\n  // Ensure styles are fully reset, important if paused state had specific colors\n  button.style.backgroundColor = \"\";\n  button.style.background = \"\";\n  button.style.color = \"\"; // Reset text color if changed\n};\n\nconst handleMessageFromBackgroundScript = (messagePayload: any, sender: any): Promise<any> => {\n  const uniqueCallId = crypto.randomUUID().substring(0, 8);\n  const currentButtonKeys = Object.keys(downloadButtons);\n  let payloadString = \"<payload_serialization_error>\";\n  try { payloadString = JSON.stringify(messagePayload); } catch { /* ignore */ }\n  let senderString = \"<sender_serialization_error>\";\n  try { senderString = JSON.stringify(sender); } catch { /* ignore */ }\n\n  logger.logDebug(`[HANDLE_MSG_FROM_BG_ENTRY_POINT CALL_ID: ${uniqueCallId}] Invoked. Payload: ${payloadString}. Sender: ${senderString}. Current downloadButton keys: ${currentButtonKeys.join(\",\") || \"none\"}`);\n\n  const relevantKeys = [\"downloadId\", \"progress\", \"error\", \"status\", \"browserDownloadId\", \"originalDownloadId\", \"completionWithoutId\", \"completed\", \"success\", \"timestamp\", \"scdl_test_message\"];\n  const messageKeys = Object.keys(messagePayload || {});\n  const isRelevantMessage = messageKeys.some(key => relevantKeys.includes(key));\n\n  if (!isRelevantMessage && messageKeys.length > 0) {\n    logger.logWarn(\"[HANDLE_MSG_FROM_BG] Discarding irrelevant message by key filter. Payload:\", JSON.parse(JSON.stringify(messagePayload)));\n    return Promise.resolve({ handled: false, reason: \"Irrelevant message\" });\n  }\n  if (isRelevantMessage) {\n    logger.logDebug(\"[HANDLE_MSG_FROM_BG] Relevant message PASSED initial filter. Payload:\", JSON.parse(JSON.stringify(messagePayload)));\n  }\n\n  const { downloadId: receivedDownloadIdFromPayload, progress, error, status, completionWithoutId, completed, timestamp, browserDownloadId, originalDownloadId: originalIdFromPayload } = messagePayload;\n\n  let finalDownloadId: string | undefined;\n\n  if (originalIdFromPayload) {\n    finalDownloadId = originalIdFromPayload;\n    logger.logDebug(`[CS_FID_LOGIC CALL_ID: ${uniqueCallId}] finalDownloadId set from message.originalDownloadId: ${finalDownloadId}`);\n  } else if (receivedDownloadIdFromPayload) {\n    finalDownloadId = receivedDownloadIdFromPayload;\n    logger.logDebug(`[CS_FID_LOGIC CALL_ID: ${uniqueCallId}] finalDownloadId set from message.downloadId: ${finalDownloadId}`);\n  } else {\n    logger.logWarn(`[CS_FID_LOGIC CALL_ID: ${uniqueCallId}] Message has neither originalDownloadId nor downloadId at the top level of payload.`);\n    if (messagePayload && messagePayload.error && messagePayload.originalMessage && typeof messagePayload.originalMessage.downloadId === \"string\") {\n      finalDownloadId = messagePayload.originalMessage.downloadId;\n      logger.logInfo(`[CS_FID_LOGIC CALL_ID: ${uniqueCallId}] finalDownloadId recovered from message.originalMessage.downloadId due to error payload from bridge: ${finalDownloadId}`);\n    }\n  }\n\n  if (!finalDownloadId && browserDownloadId) {\n    const matchedDownloadIds = Object.keys(downloadButtons).filter(id => downloadButtons[id].browserDownloadId === browserDownloadId);\n    if (matchedDownloadIds.length === 1) {\n      finalDownloadId = matchedDownloadIds[0];\n      logger.logDebug(`[CS_FID_LOGIC] finalDownloadId set from browserDownloadId match: ${finalDownloadId}`);\n      if (progress === 101 || completed === true) {\n        const buttonData = downloadButtons[finalDownloadId!];\n        resetButtonBackground(buttonData.elem);\n        buttonData.elem.style.backgroundColor = \"#19a352\";\n        setButtonText(buttonData.elem, \"Downloaded!\");\n        buttonData.elem.title = \"Downloaded successfully (matched by browser downloadId)\";\n        buttonData.elem.onclick = null;\n        buttonData.state = \"Downloaded\";\n        buttonData.resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n        logger.logDebug(`[CS_FID_LOGIC] Updated button ${finalDownloadId} to Downloaded state from browserDownloadId match`);\n        return Promise.resolve({ handled: true, id: finalDownloadId });\n      }\n    } else if (matchedDownloadIds.length > 1) {\n      logger.logWarn(`[CS_FID_LOGIC] Found multiple (${matchedDownloadIds.length}) buttons with browserDownloadId=${browserDownloadId}. Cannot reliably map message.`);\n    }\n  }\n\n  if (!finalDownloadId || finalDownloadId === \"undefined_completion\" || completionWithoutId) {\n    logger.logWarn(\"[CS_GENERIC_MATCH_ENTRY] Entering generic/undefined ID matching. \" + `finalDownloadId: ${finalDownloadId}, is_undefined_completion: ${finalDownloadId === \"undefined_completion\"}, ` + `completionWithoutId flag: ${completionWithoutId}. Message payload:`, JSON.parse(JSON.stringify(messagePayload)));\n    const allPotentiallyActiveStates = [\"Downloading\", \"Preparing\", \"Finishing\", \"Pausing\", \"Resuming\"];\n    const currentActiveDownloads = Object.keys(downloadButtons).filter(id => allPotentiallyActiveStates.includes(downloadButtons[id].state));\n    const isMinimalMessage = progress === undefined && status === undefined && completed !== true && completionWithoutId !== true && error === undefined && typeof messagePayload === \"object\" && Object.keys(messagePayload).length <= (originalIdFromPayload ? 5 : (messagePayload.type ? 2 : 1));\n    if (currentActiveDownloads.length === 0 && isMinimalMessage) {\n      logger.logWarn(`[HANDLE_MSG_FROM_BG] Received minimal message (keys: ${Object.keys(messagePayload).join(\", \") || \"none\"}) with no active downloads. Discarding.`, { message: messagePayload });\n      return Promise.resolve({ handled: false, reason: \"Minimal message, no active downloads\" });\n    }\n    logger.logWarn(`[HANDLE_MSG_FROM_BG] Received message (keys: ${Object.keys(messagePayload).join(\", \") || \"none\"}) without a usable finalDownloadId or it is a generic completion. Attempting to match with active downloads (found ${currentActiveDownloads.length} using states: ${allPotentiallyActiveStates.join(\", \")}).`);\n    const isCompletionMessageEvaluation = progress === 101 || progress === 102 || completed === true || completionWithoutId === true || (status === undefined && error === undefined && typeof messagePayload === \"object\" && Object.keys(messagePayload).length <= (originalIdFromPayload ? 5 : 4));\n    if (isCompletionMessageEvaluation) {\n      const activeIdsForCompletionLogic = currentActiveDownloads;\n      logger.logWarn(`[HANDLE_MSG_FROM_BG] Attempting to match as completion message. Found ${activeIdsForCompletionLogic.length} candidates using states: ${allPotentiallyActiveStates.join(\", \")}.`);\n      if (activeIdsForCompletionLogic.length === 1) {\n        const matchedId = activeIdsForCompletionLogic[0];\n        logger.logWarn(`[HANDLE_MSG_FROM_BG] Matched undefined/generic ID message to single active download: ${matchedId}`);\n        finalDownloadId = matchedId;\n        const isActuallyComplete = progress === 101 || progress === 102 || completed === true || completionWithoutId === true;\n        if (isActuallyComplete) {\n          const buttonData = downloadButtons[finalDownloadId!];\n          resetButtonBackground(buttonData.elem);\n          buttonData.elem.style.backgroundColor = \"#19a352\";\n          setButtonText(buttonData.elem, \"Downloaded!\");\n          buttonData.elem.title = \"Downloaded successfully (auto-matched generic completion)\";\n          buttonData.elem.onclick = null;\n          buttonData.state = \"Downloaded\";\n          buttonData.resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n          logger.logWarn(`[HANDLE_MSG_FROM_BG] Updated button ${finalDownloadId} to Downloaded state from matched generic completion message.`);\n          return Promise.resolve({ handled: true, id: finalDownloadId });\n        }\n      } else if (activeIdsForCompletionLogic.length > 1 && timestamp) {\n        let mostRecentId = null; let mostRecentTime = 0;\n        activeIdsForCompletionLogic.forEach(id => { const lastTime = downloadButtons[id].lastProgressTime || 0; if (lastTime > mostRecentTime) { mostRecentTime = lastTime; mostRecentId = id; } });\n        if (mostRecentId) {\n          logger.logWarn(`[HANDLE_MSG_FROM_BG] Matched undefined/generic ID to most recent active download by timestamp: ${mostRecentId}`);\n          finalDownloadId = mostRecentId;\n          const isActuallyComplete = progress === 101 || progress === 102 || completed === true || completionWithoutId === true;\n          if (isActuallyComplete) {\n            const buttonData = downloadButtons[finalDownloadId!];\n            resetButtonBackground(buttonData.elem); buttonData.elem.style.backgroundColor = \"#19a352\"; setButtonText(buttonData.elem, \"Downloaded!\");\n            buttonData.elem.title = \"Downloaded successfully (auto-matched generic completion by timestamp)\"; buttonData.elem.onclick = null; buttonData.state = \"Downloaded\";\n            buttonData.resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n            logger.logWarn(`[HANDLE_MSG_FROM_BG] Updated button ${finalDownloadId} to Downloaded state from timestamp-matched generic completion message.`);\n            return Promise.resolve({ handled: true, id: finalDownloadId });\n          }\n        } else { logger.logWarn(`[HANDLE_MSG_FROM_BG] Found ${activeIdsForCompletionLogic.length} active downloads, but couldn't match generic completion message by timestamp.`); }\n      } else if (activeIdsForCompletionLogic.length > 0) {\n        logger.logWarn(`[HANDLE_MSG_FROM_BG] Found ${activeIdsForCompletionLogic.length} active downloads, can't match generic completion message reliably by unique or timestamp.`);\n      } else { logger.logWarn(\"[HANDLE_MSG_FROM_BG] No active downloads to match generic completion message to.\"); }\n    }\n    if (!finalDownloadId) {\n      if (currentActiveDownloads.length === 0 && isMinimalMessage) {\n        logger.logWarn(\"[HANDLE_MSG_FROM_BG] Could not determine finalDownloadId for minimal message (no active downloads) after matching attempts. Discarding.\", { message: messagePayload });\n      } else {\n        logger.logWarn(\"[HANDLE_MSG_FROM_BG] Could not determine finalDownloadId from generic message after all attempts. Discarding.\", { message: messagePayload });\n      }\n      return Promise.resolve({ handled: false, reason: \"Could not determine finalDownloadId from generic message\" });\n    }\n  }\n\n  if (!finalDownloadId) {\n    logger.logDebug(\"[HANDLE_MSG_FROM_BG] CRITICAL: finalDownloadId is null/undefined after all matching attempts. Discarding message.\", messagePayload);\n    return Promise.resolve({ handled: false, reason: \"finalDownloadId null after all matching\" });\n  }\n  const buttonData = downloadButtons[finalDownloadId!];\n  if (!buttonData) {\n    // Check if this is a late finalization message for an already cleaned-up button\n    const isErrorObject = typeof messagePayload.error === \"object\" && messagePayload.error !== null;\n    const isErrorString = typeof messagePayload.error === \"string\" && messagePayload.error !== \"\";\n    const isLateFinalization = (messagePayload.progress !== undefined && messagePayload.progress >= 101 && messagePayload.progress <= 102) ||\n      messagePayload.completed === true ||\n      isErrorObject || isErrorString;\n\n    if (isLateFinalization) {\n      logger.logInfo(`[HANDLE_MSG_FROM_BG CALL_ID: ${uniqueCallId}] Button data not found for finalDownloadId: ${finalDownloadId}, but message is a late finalization. Likely already cleaned up. Message:`, JSON.parse(JSON.stringify(messagePayload)));\n      return Promise.resolve({ handled: true, reason: \"Button data not found, late finalization message\" });\n    } else {\n      // It's not a finalization message, so the warning is more relevant\n      const currentKeysForWarning = Object.keys(downloadButtons);\n      let payloadStringForWarning = \"<payload_serialization_error_in_warning>\";\n      try { payloadStringForWarning = JSON.stringify(messagePayload); } catch { /* ignore */ }\n      logger.logWarn(`[HANDLE_MSG_FROM_BG CALL_ID: ${uniqueCallId}] Button data not found for finalDownloadId: ${finalDownloadId}. Message: ${payloadStringForWarning}. All downloadButton keys at this point: ${currentKeysForWarning.join(\",\") || \"none\"}`);\n      return Promise.resolve({ handled: false, reason: \"Button data not found for finalDownloadId\" });\n    }\n  }\n  const { elem: downloadButton, resetTimer, state: currentState } = buttonData;\n  logger.logDebug(`[HANDLE_MSG_FROM_BG] Processing for finalDownloadId: ${finalDownloadId}. Current button state: ${currentState}. Message progress: ${progress}, success: ${messagePayload.success}`);\n\n  // If button is already marked as Downloaded or Error, ignore further progress/status updates for this ID\n  // unless it's a specific re-activation or a new command.\n  if (currentState === \"Downloaded\" || currentState === \"Error\") {\n    // Allow specific messages like a new download attempt (which would have a new ID or different context)\n    // For now, if it's just progress or a simple status for an already finalized download, log and ignore.\n    if (progress !== undefined || status !== undefined) { // status might be part of a pause/resume attempt on a finalized button\n      logger.logWarn(`[HANDLE_MSG_FROM_BG] Received message for already finalized downloadId ${finalDownloadId} (state: ${currentState}). Ignoring for UI update. Message:`, messagePayload);\n      return Promise.resolve({ handled: true, id: finalDownloadId, reason: `Already in ${currentState} state` });\n    }\n  }\n\n  // Check for late/redundant simple acknowledgments\n  const isSimpleAck = messagePayload.error === \"\" &&\n    messagePayload.success === undefined &&\n    progress === undefined &&\n    status === undefined &&\n    completed === undefined;\n\n  if (isSimpleAck && currentState !== \"Preparing\" && originalIdFromPayload === finalDownloadId) {\n    // It's a simple ack, but we're not in 'Preparing' state anymore.\n    // This might be a late/redundant ack from the background after an initial command.\n    // No specific UI action needed if we're past the 'Preparing' stage for this type of message.\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Received redundant simple acknowledgment for ${finalDownloadId} while button state is ${currentState}. Ignoring for UI update. Payload:`, JSON.parse(JSON.stringify(messagePayload)));\n    // We still need to return a promise, similar to how other branches do.\n    // Indicate it was handled, but no state change from this specific redundant message.\n    return Promise.resolve({ handled: true, id: finalDownloadId, reason: \"Redundant simple ack, state not Preparing\" });\n  }\n\n  if (messagePayload.success === true && originalIdFromPayload === finalDownloadId) {\n    logger.logDebug(`[CS_DEBUG_ACK_INITIAL_MATCH] Early ack initial match for ${finalDownloadId}. Current button state: ${currentState}. Full Message:`, JSON.parse(JSON.stringify(messagePayload)));\n    if (currentState === \"Preparing\") {\n      logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] currentState is Preparing.\");\n      if (progress === undefined) {\n        logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] message.progress is undefined.\");\n        if (status === undefined) {\n          logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] message.status is undefined.\");\n          if (completed === undefined) {\n            logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] message.completed is undefined.\");\n            if (!error) {\n              logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] !message.error is true. ALL PRE-CONDITIONS FOR STATE TRANSITION MET.\");\n            } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] !message.error FAILED. Error: ${error}`); }\n          } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] message.completed FAILED. Was: ${completed}`); }\n        } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] message.status FAILED. Was: ${status}`); }\n      } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] message.progress FAILED. Was: ${progress}`); }\n    } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] currentState was NOT Preparing. Was: ${currentState}`); }\n  }\n\n  // Adjusted condition: Accept if (success===true AND no error) OR (error===\"\" AND success is undefined/not explicitly false)\n  if (((messagePayload.success === true && !error) || (messagePayload.error === \"\" && messagePayload.success === undefined)) && originalIdFromPayload === finalDownloadId && currentState === \"Preparing\" && progress === undefined && status === undefined && completed === undefined) {\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Initial command success for ${finalDownloadId}. Transitioning to Downloading state.`);\n    setButtonText(downloadButton, \"Downloading... (Click to Pause)\");\n    downloadButton.style.background = \"linear-gradient(90deg, #ff5419 0%, transparent 0%)\";\n    downloadButton.style.cursor = \"pointer\";\n    downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    downloadButtons[finalDownloadId!].state = \"Downloading\";\n    downloadButtons[finalDownloadId!].lastProgressTime = Date.now();\n  } else if (progress === 101) {\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Download complete (101) for finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton);\n    downloadButton.style.backgroundColor = \"#19a352\";\n    setButtonText(downloadButton, \"Downloaded!\");\n    downloadButton.title = \"Downloaded successfully\";\n    downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Downloaded\";\n    downloadButtons[finalDownloadId!].resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n  } else if (progress === 102) {\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Download complete with errors (102) for finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton); downloadButton.style.backgroundColor = \"gold\"; downloadButton.style.color = \"#333\";\n    setButtonText(downloadButton, \"Downloaded!\"); downloadButton.title = error || \"Some tracks failed to download\"; downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Downloaded\"; downloadButtons[finalDownloadId!].resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 30000);\n  } else if (status === \"Paused\") {\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Button state updated to Paused, finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton); setButtonText(downloadButton, \"Paused (Click to Resume)\");\n    downloadButton.style.cursor = \"pointer\"; downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    downloadButtons[finalDownloadId!].state = \"Paused\";\n  } else if (status === \"Resuming\") {\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Button state updated to Resuming, finalDownloadId=${finalDownloadId}`);\n    setButtonText(downloadButton, \"Resuming...\"); downloadButton.style.cursor = \"default\"; downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Resuming\";\n  } else if (progress === 100 || (progress > 100 && progress < 101)) {\n    if (currentState !== \"Paused\" && currentState !== \"Pausing\" && currentState !== \"Resuming\") {\n      logger.logDebug(`[HANDLE_MSG_FROM_BG] Button state updated to Finishing, finalDownloadId=${finalDownloadId}`);\n      setButtonText(downloadButton, \"Finishing...\"); downloadButton.style.background = \"linear-gradient(90deg, #ff5419 100%, transparent 0%)\";\n      downloadButton.onclick = null; downloadButtons[finalDownloadId!].state = \"Finishing\";\n    }\n  } else if (progress !== undefined && progress >= 0 && progress < 100) {\n    // If the button is currently in a \"Pausing\" or \"Paused\" state (due to user click),\n    // ignore incoming progress updates that reflect the \"Downloading\" state to prevent flicker.\n    if (currentState === \"Pausing\" || currentState === \"Paused\") {\n      logger.logDebug(`[HANDLE_MSG_FROM_BG] Progress update (${progress}%) for ${finalDownloadId} received while state is '${currentState}'. Ignoring UI update to prevent flicker.`);\n      // Optionally, still update lastProgressTime if desired, even if UI doesn't change:\n      // if (downloadButtons[finalDownloadId!]) {\n      //   downloadButtons[finalDownloadId!].lastProgressTime = Date.now();\n      // }\n      return Promise.resolve({ handled: true, id: finalDownloadId, reason: \"Ignoring download progress while pausing/paused\" });\n    }\n\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Button state updated to Downloading (${progress}%), finalDownloadId=${finalDownloadId}`);\n    setButtonText(downloadButton, \"Downloading... (Click to Pause)\");\n    downloadButton.style.background = `linear-gradient(90deg, #ff5419 ${progress}%, transparent 0%)`;\n\n    // Only assign/re-assign the click handler if the button wasn't already in the \"Downloading\" state\n    // or if the handler is somehow missing.\n    // currentState reflects the state *before* this message.\n    if (currentState !== \"Downloading\" || !downloadButton.onclick) {\n      downloadButton.style.cursor = \"pointer\";\n      downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    }\n    // Ensure the state is marked as Downloading.\n    downloadButtons[finalDownloadId!].state = \"Downloading\";\n    // Update lastProgressTime, assuming it's a property in your DownloadButton interface for downloadButtons entries\n    if (downloadButtons[finalDownloadId!]) {\n      downloadButtons[finalDownloadId!].lastProgressTime = Date.now();\n    }\n  } else if (error) {\n    logger.logWarn(`[HANDLE_MSG_FROM_BG] Button state updated to Error: ${error}, finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton); downloadButton.style.backgroundColor = \"#d30029\";\n    setButtonText(downloadButton, \"ERROR\", error); downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Error\";\n  } else if (currentState === \"Preparing\" && progress !== undefined) {\n    logger.logDebug(`[HANDLE_MSG_FROM_BG] Button state forcibly updated from Preparing to Downloading, finalDownloadId=${finalDownloadId}`);\n    setButtonText(downloadButton, \"Downloading... (Click to Pause)\");\n    downloadButton.style.background = \"linear-gradient(90deg, #ff5419 \" + (progress || 0) + \"%, transparent 0%)\";\n    downloadButton.style.cursor = \"pointer\"; downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    downloadButtons[finalDownloadId!].state = \"Downloading\";\n  }\n  return Promise.resolve({ handled: true, id: finalDownloadId, finalState: downloadButtons[finalDownloadId!]?.state });\n};\n\nlogger.logDebug(\"[CONTENT_SCRIPT_LISTENER_SETUP] Attempting to set up onMessage listener NOW.\");\n\nif (typeof onMessage !== \"undefined\") {\n  onMessage(handleMessageFromBackgroundScript);\n  logger.logDebug(`[CONTENT_SCRIPT_LISTENER_SETUP] onMessage listener setup complete. Document readyState: ${document.readyState}`);\n} else {\n  logger.logDebug(\"[CONTENT_SCRIPT_SETUP_ERROR] onMessage utility is not defined!\");\n}\n\nconst createDownloadButton = (small?: boolean) => {\n  const button = document.createElement(\"button\");\n  const buttonSizeClass = small ? \"sc-button-small\" : \"sc-button-medium\";\n\n  button.className = `sc-button-download sc-button ${buttonSizeClass} sc-button-responsive`;\n  setButtonText(button, \"Download\");\n\n  return button;\n};\n\nconst createDownloadCommand = (url: string) => {\n  // Determine if the URL is for a playlist/set based on URL pattern\n  const isSetUrl = url.includes(\"/sets/\") || url.includes(\"/albums/\");\n\n  // DEBUG: Add extensive logging for playlist detection\n  logger.logDebug(`createDownloadCommand: URL=${url}, isSetUrl=${isSetUrl}`, { url, isSetUrl });\n\n  const command = (downloadId: string) => {\n    if (!downloadId) {\n      logger.logError(\"Attempted to send DOWNLOAD command with undefined/empty downloadId\", { url });\n      return Promise.reject(\"Undefined/empty downloadId for DOWNLOAD command\");\n    }\n    return loggedSendMessageToBackend({ // USE WRAPPER\n      type: isSetUrl ? \"DOWNLOAD_SET\" : \"DOWNLOAD\",\n      url,\n      downloadId,\n    }, \"createDownloadCommand\");\n  };\n\n  // Store the URL directly on the command function for use by the context menu\n  (command as any).url = url;\n  // Set the isSet flag to indicate if this is a set/playlist\n  (command as any).isSet = isSetUrl;\n\n  // DEBUG: Add verification log\n  logger.logDebug(`createDownloadCommand: Created command with isSet=${(command as any).isSet}`, { commandUrl: (command as any).url, isSet: (command as any).isSet });\n\n  return command;\n};\n\nconst addDownloadButtonToParent = (parent: Node & ParentNode, onClicked: OnButtonClicked & { url?: string; isSet?: boolean }, small?: boolean) => {\n  const downloadButtonExists = parent.querySelector(\"button.sc-button-download\") !== null;\n\n  if (downloadButtonExists) {\n    logger.logDebug(\"Download button already exists\");\n    return;\n  }\n\n  // Log the parent and the clicked URL details\n  logger.logDebug(\"Adding download button\", {\n    parentNode: parent.nodeName,\n    url: (onClicked as any).url,\n    isSet: (onClicked as any).isSet\n  });\n\n  const button = createDownloadButton(small);\n  const downloadUrl = (onClicked as any).url; // Store URL early to ensure it's available\n\n  // Debug URL to ensure it's correctly captured\n  logger.logInfo(`Button created with URL: ${downloadUrl}`);\n\n  const originalOnClick = async () => {\n    const downloadId: string = crypto.randomUUID();\n\n    // Store the button and URL information *immediately* when button is clicked\n    downloadButtons[downloadId] = {\n      elem: button,\n      onClick: originalOnClick, // Store self for potential reset\n      state: \"Preparing\",\n      originalUrl: downloadUrl, // Store URL needed for pause/resume context\n      lastProgressTime: Date.now() // Add timestamp for progress tracking\n    };\n\n    logger.logInfo(`Button clicked with downloadId: ${downloadId}, URL: ${downloadUrl}`);\n\n    button.style.cursor = \"default\";\n    button.onclick = null; // Disable direct click while preparing\n    setButtonText(button, \"Preparing...\");\n    resetButtonBackground(button); // Ensure clean background\n\n    // Add a safety timeout to reset button if we don't get progress updates\n    const safetyTimeout = setTimeout(() => {\n      const currentButtonData = downloadButtons[downloadId];\n      if (currentButtonData && currentButtonData.state === \"Preparing\") {\n        logger.logWarn(`Safety timeout triggered for downloadId=${downloadId}, button still in Preparing state`);\n        setButtonText(button, \"Timeout (Retry?)\");\n        button.title = \"Download request timed out. Click to try again.\";\n        button.style.backgroundColor = \"#d30029\"; // Error color\n        button.style.cursor = \"pointer\";\n        button.onclick = originalOnClick; // Re-enable click to let user retry\n        downloadButtons[downloadId].state = \"Error\"; // Mark as Error due to timeout\n      }\n    }, 10000); // 10 seconds safety timeout\n\n    // Add a completion safety timeout to prevent downloads from being stuck in Downloading state\n    // This needs to be much longer to account for large downloads\n    const completionTimeout = setTimeout(() => {\n      const currentButtonData = downloadButtons[downloadId];\n      if (currentButtonData && currentButtonData.state === \"Downloading\") {\n        const lastProgressTime = currentButtonData.lastProgressTime || 0;\n        const timeSinceLastProgress = Date.now() - lastProgressTime;\n\n        // If no progress updates for more than 2 minutes, consider it stuck\n        if (timeSinceLastProgress > 120000) { // 2 minutes\n          logger.logWarn(`Completion safety timeout triggered for downloadId=${downloadId}. Download seems stuck in Downloading state for ${timeSinceLastProgress / 1000}s`);\n\n          // Check if the download might have completed silently\n          if (timeSinceLastProgress > 180000) { // 3 minutes - assume potential completion\n            logger.logInfo(`Assuming potential silent completion for downloadId=${downloadId}`);\n            resetButtonBackground(button);\n            button.style.backgroundColor = \"#19a352\";\n            setButtonText(button, \"Downloaded!\");\n            button.title = \"Download likely completed (auto-detected)\";\n            button.onclick = null;\n            downloadButtons[downloadId].state = \"Downloaded\";\n            downloadButtons[downloadId].resetTimer = window.setTimeout(() => runResetLogic(downloadId), 10000);\n          } else {\n            // Just mark as potentially stuck but still downloading\n            logger.logInfo(`Marking download ${downloadId} as potentially stuck`);\n            setButtonText(button, \"Downloading... (may be stuck)\");\n          }\n        }\n      }\n    }, 300000); // 5 minutes timeout\n\n    // Execute the original download command (passed in as onClicked)\n    try {\n      const response = await onClicked(downloadId);\n      logger.logInfo(`Download command response for ${downloadId}:`, response);\n\n      // Clear safety timeout since we got a response\n      clearTimeout(safetyTimeout);\n\n      // Check if button is still in preparing state and update if needed\n      const currentButtonData = downloadButtons[downloadId];\n      if (currentButtonData && currentButtonData.state === \"Preparing\") {\n        logger.logInfo(`Manually transitioning button from Preparing to Downloading state for ${downloadId}`);\n        setButtonText(button, \"Downloading... (Click to Pause)\");\n        button.style.background = \"linear-gradient(90deg, #ff5419 0%, transparent 0%)\";\n        button.style.cursor = \"pointer\";\n        button.onclick = createPauseResumeHandler(downloadId);\n        downloadButtons[downloadId].state = \"Downloading\";\n        downloadButtons[downloadId].lastProgressTime = Date.now();\n      }\n    } catch (err) {\n      // Clear safety timeout since we got an error response\n      clearTimeout(safetyTimeout);\n      clearTimeout(completionTimeout);\n\n      logger.logError(`Initial download command failed for ${downloadUrl}`, err);\n      // Handle immediate failure case\n      if (downloadButtons[downloadId]) {\n        downloadButtons[downloadId].state = \"Error\";\n        setButtonText(button, \"ERROR\", err.message || \"Failed to start\");\n        button.style.backgroundColor = \"#d30029\";\n      }\n    }\n  };\n\n  // Add context menu for force redownload\n  button.oncontextmenu = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Remove any existing context menu\n    const existingMenu = document.getElementById(\"scdl-context-menu\");\n    if (existingMenu) document.body.removeChild(existingMenu);\n\n    // Create context menu\n    const menu = document.createElement(\"div\");\n    menu.id = \"scdl-context-menu\";\n    menu.style.position = \"absolute\";\n    menu.style.left = `${e.pageX}px`;\n    menu.style.top = `${e.pageY}px`;\n    menu.style.background = \"#fff\";\n    menu.style.boxShadow = \"0 2px 5px rgba(0,0,0,0.2)\";\n    menu.style.padding = \"5px 0\";\n    menu.style.borderRadius = \"3px\";\n    menu.style.zIndex = \"10000\";\n\n    document.body.appendChild(menu);\n\n    // Click elsewhere to dismiss\n    const dismissHandler = () => {\n      if (document.getElementById(\"scdl-context-menu\")) {\n        document.body.removeChild(menu);\n      }\n      document.removeEventListener(\"click\", dismissHandler);\n    };\n\n    document.addEventListener(\"click\", dismissHandler);\n\n    return false; // Prevent browser context menu\n  };\n\n  button.onclick = originalOnClick; // Assign the initial click handler\n\n  parent.appendChild(button);\n\n  // --- Add Range Button for Sets ---\n  const isSet = (onClicked as any).isSet;\n\n  // DEBUG: Add logging to verify isSet flag\n  logger.logInfo(\"Checking if should add range button:\", {\n    isSet,\n    url: (onClicked as any).url,\n    urlIncludes: {\n      sets: (onClicked as any).url?.includes(\"/sets/\"),\n      albums: (onClicked as any).url?.includes(\"/albums/\")\n    },\n    browserType: typeof browser !== \"undefined\" ? \"Firefox\" : \"Chrome\"\n  });\n\n  // Determine the final isSet value using the abstracted utility function\n  const finalIsSet = determineIfUrlIsSet(downloadUrl, isSet);\n\n  if (finalIsSet) {\n    // ... (range button logic remains the same, but ensure it uses the main button's state for updates)\n    const rangeButton = document.createElement(\"button\");\n\n    // DEBUG: Log that we're creating a range button\n    logger.logInfo(\"Creating range button for URL=\" + ((onClicked as any).url || \"unknown\"));\n\n    const rangeButtonSizeClass = small ? \"sc-button-small\" : \"sc-button-medium\"; // Match size\n    rangeButton.className = `sc-button-range sc-button ${rangeButtonSizeClass} sc-button-responsive`;\n    rangeButton.textContent = \"Range...\";\n    rangeButton.title = \"Download a range of tracks\";\n    rangeButton.style.marginLeft = \"5px\"; // Add some space\n\n    rangeButton.onclick = (e) => {\n      e.preventDefault(); // Prevent form submission if inside one\n      e.stopPropagation(); // Prevent triggering other clicks\n\n      // IMPORTANT: Create a downloadId and store button info BEFORE opening the modal\n      const preDownloadId: string = crypto.randomUUID();\n\n      // Store the button with the URL information before the modal is even shown\n      downloadButtons[preDownloadId] = {\n        elem: button,\n        onClick: originalOnClick,\n        state: \"Idle\", // Not preparing yet until user confirms\n        originalUrl: downloadUrl, // Use the URL captured when the button was created\n        lastProgressTime: Date.now() // Add timestamp for progress tracking\n      };\n\n      logger.logInfo(`Range button clicked. Created preDownloadId: ${preDownloadId}, with URL: ${downloadUrl}`);\n\n      // Prepare the handler for the modal's Download button\n      const handleRangeDownload = (start: number, end: number | null) => {\n        // Use our pre-created downloadId instead of searching\n        const mainButtonId = preDownloadId;\n\n        logger.logInfo(`Range download handler called with start=${start}, end=${end}, mainButtonId=${mainButtonId}`);\n\n        const buttonData = downloadButtons[mainButtonId];\n\n        // Debug the buttonData to see what's available\n        logger.logInfo(\"Button data for range download:\", {\n          hasButtonData: !!buttonData,\n          originalUrl: buttonData?.originalUrl,\n          state: buttonData?.state\n        });\n\n        if (!buttonData || !buttonData.originalUrl) {\n          logger.logError(`Range download failed: No button data or URL for ID ${mainButtonId}`);\n          const errorDiv = document.getElementById(\"scdl-range-modal-error\");\n          if (errorDiv) {\n            errorDiv.textContent = \"Error: Could not get original URL for the playlist.\";\n            errorDiv.style.display = \"block\";\n          }\n          return;\n        }\n\n        // Update button text to \"Preparing...\"\n        setButtonText(buttonData.elem, \"Preparing...\");\n        buttonData.elem.style.cursor = \"default\";\n        buttonData.elem.onclick = null;\n        buttonData.state = \"Preparing\";\n        buttonData.lastProgressTime = Date.now();\n\n        // Add safety timeout for range downloads too\n        const safetyTimeout = setTimeout(() => {\n          if (downloadButtons[mainButtonId] && downloadButtons[mainButtonId].state === \"Preparing\") {\n            logger.logWarn(`Safety timeout triggered for range download with ID ${mainButtonId}`);\n            setButtonText(buttonData.elem, \"Timeout (Retry?)\"); // MODIFIED\n            buttonData.elem.title = \"Range download request timed out. Click to try again.\"; // MODIFIED\n            buttonData.elem.style.backgroundColor = \"#d30029\"; // MODIFIED // Error color\n            buttonData.elem.style.cursor = \"pointer\";\n            buttonData.elem.onclick = originalOnClick; // Allow retrying with regular download\n            downloadButtons[mainButtonId].state = \"Error\"; // MODIFIED // Mark as Error due to timeout\n          }\n        }, 15000); // Slightly longer timeout for range downloads\n\n        // Add a completion safety timeout specifically for range downloads\n        // Since range downloads can take longer, we use a longer timeout\n        const completionTimeout = setTimeout(() => {\n          const currentButtonData = downloadButtons[mainButtonId];\n          if (currentButtonData && (currentButtonData.state === \"Downloading\" || currentButtonData.state === \"Preparing\")) {\n            const lastProgressTime = currentButtonData.lastProgressTime || 0;\n            const timeSinceLastProgress = Date.now() - lastProgressTime;\n\n            // If no progress updates for more than 5 minutes, consider it potentially stuck\n            if (timeSinceLastProgress > 300000) { // 5 minutes\n              logger.logWarn(`Range download completion safety timeout triggered for ID ${mainButtonId}. Download seems stuck for ${timeSinceLastProgress / 1000}s`);\n\n              // For range downloads, after 10 minutes, assume it might have completed silently\n              if (timeSinceLastProgress > 1800000) { // 30 minutes\n                logger.logInfo(`Assuming potential silent completion for range download ${mainButtonId}`);\n                resetButtonBackground(buttonData.elem);\n                buttonData.elem.style.backgroundColor = \"#19a352\";\n                setButtonText(buttonData.elem, \"Downloaded!\");\n                buttonData.elem.title = \"Range download likely completed (auto-detected)\";\n                buttonData.elem.onclick = null;\n                downloadButtons[mainButtonId].state = \"Downloaded\";\n                downloadButtons[mainButtonId].resetTimer = window.setTimeout(() => runResetLogic(mainButtonId), 10000);\n              } else {\n                // Just mark as potentially stuck but still downloading\n                logger.logInfo(`Marking range download ${mainButtonId} as potentially stuck`);\n                setButtonText(buttonData.elem, \"Downloading range... (may be stuck)\");\n              }\n            }\n          }\n        }, 1800000); // 30 minutes timeout for range downloads\n\n        // Log the message we're about to send\n        logger.logInfo(\"Sending range download message:\", {\n          type: \"DOWNLOAD_SET_RANGE\",\n          url: buttonData.originalUrl,\n          start,\n          end,\n          downloadId: mainButtonId\n        });\n\n        // Send the message with full logging\n        loggedSendMessageToBackend({\n          type: \"DOWNLOAD_SET_RANGE\",\n          url: buttonData.originalUrl,\n          start,\n          end,\n          downloadId: mainButtonId,\n        }, \"handleRangeDownload\").then(response => {\n          // Clear safety timeout on response\n          clearTimeout(safetyTimeout);\n\n          logger.logInfo(\"Range download response:\", response);\n\n          // Manually update button if still in Preparing state\n          if (downloadButtons[mainButtonId] && downloadButtons[mainButtonId].state === \"Preparing\") {\n            logger.logInfo(`Manually transitioning range button from Preparing to Downloading state for ${mainButtonId}`);\n            setButtonText(buttonData.elem, \"Downloading... (Click to Pause)\");\n            buttonData.elem.style.background = \"linear-gradient(90deg, #ff5419 0%, transparent 0%)\";\n            buttonData.elem.style.cursor = \"pointer\";\n            buttonData.elem.onclick = createPauseResumeHandler(mainButtonId);\n            downloadButtons[mainButtonId].state = \"Downloading\";\n            downloadButtons[mainButtonId].lastProgressTime = Date.now();\n          }\n        }).catch(error => {\n          // Clear safety timeout on error\n          clearTimeout(safetyTimeout);\n          clearTimeout(completionTimeout);\n\n          logger.logError(\"Range download request failed:\", error);\n\n          // Update button to error state\n          if (downloadButtons[mainButtonId]) {\n            resetButtonBackground(buttonData.elem);\n            buttonData.elem.style.backgroundColor = \"#d30029\";\n            setButtonText(buttonData.elem, \"ERROR\", error?.message || \"Range download failed\");\n            buttonData.elem.onclick = null;\n            downloadButtons[mainButtonId].state = \"Error\";\n          }\n        });\n      };\n\n      showModal(button, handleRangeDownload);\n    };\n    parent.appendChild(rangeButton);\n  }\n  // --------------------------------\n};\n\nconst removeElementFromParent = (element: Element) => {\n  element.parentNode.removeChild(element);\n};\n\nconst removeElementsMatchingSelectors = (selectors: string) => {\n  const elements = document.querySelectorAll(selectors);\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    removeElementFromParent(element);\n  }\n};\n\nconst removeBuyLinks = () => {\n  const selector = \"a.sc-buylink\";\n\n  removeElementsMatchingSelectors(selector);\n\n  const event: ObserverEvent = {\n    selector,\n    callback: (node) => removeElementFromParent(node),\n  };\n\n  observer?.addEvent(event);\n};\n\nconst removeDownloadButtons = () => {\n  removeElementsMatchingSelectors(\"button.sc-button-download\");\n};\n\nconst addDownloadButtonToTrackPage = () => {\n  const selector = \".sc-button-group-medium > .sc-button-like\";\n  logger.logDebug(`[TrackPage] Querying for selector: ${selector}`);\n\n  const addDownloadButtonToPossiblePlaylist = (node: Element) => {\n    logger.logDebug(\"[TrackPage] Found node matching selector:\", node);\n    const downloadUrl = window.location.origin + window.location.pathname;\n    const downloadCommand = createDownloadCommand(downloadUrl);\n    // Pass the downloadCommand which includes the isSet flag\n    addDownloadButtonToParent(node.parentNode, downloadCommand, false);\n  };\n\n  document.querySelectorAll(selector).forEach(addDownloadButtonToPossiblePlaylist);\n\n  const event: ObserverEvent = {\n    selector,\n    callback: addDownloadButtonToPossiblePlaylist,\n  };\n\n  observer?.addEvent(event);\n  logger.logDebug(`[TrackPage] Initial elements found: ${document.querySelectorAll(selector).length}`);\n};\n\nconst addDownloadButtonToFeed = () => {\n  const selector = \".sound.streamContext .sc-button-group > .sc-button-like\";\n  logger.logDebug(`[Feed] Querying for selector: ${selector}`);\n\n  const addDownloadButtonToPossiblePlaylist = (node: Element) => {\n    logger.logDebug(\"[Feed] Found node matching selector:\", node);\n    const soundBody = node.parentElement.closest(\".sound__body\");\n    const titleLink = soundBody.querySelector(\"a.soundTitle__title\");\n\n    if (titleLink === null) {\n      return;\n    }\n\n    const downloadUrl = window.location.origin + titleLink.getAttribute(\"href\");\n    const downloadCommand = createDownloadCommand(downloadUrl);\n    // Pass the downloadCommand which includes the isSet flag\n    addDownloadButtonToParent(node.parentNode, downloadCommand, true);\n  };\n\n  document.querySelectorAll(selector).forEach(addDownloadButtonToPossiblePlaylist);\n\n  const event: ObserverEvent = {\n    selector,\n    callback: addDownloadButtonToPossiblePlaylist,\n  };\n\n  observer?.addEvent(event);\n  logger.logDebug(`[Feed] Initial elements found: ${document.querySelectorAll(selector).length}`);\n};\n\nconst handleBlockRepostsConfigChange = (blockReposts: boolean) => {\n  let script = document.querySelector<HTMLScriptElement>(\"#repost-blocker\");\n\n  if (blockReposts) {\n    if (script) {\n      logger.logWarn(\"Repost-Blocker script has already been injected!\");\n\n      return;\n    }\n\n    const payloadFile = getPathFromExtensionFile(\"/js/repostBlocker.js\");\n\n    if (!payloadFile) return;\n\n    logger.logInfo(\"Start blocking reposts\");\n\n    script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.id = \"repost-blocker\";\n    script.src = payloadFile;\n\n    document.documentElement.appendChild(script);\n  } else {\n    if (!script) return;\n\n    logger.logInfo(\"Stop blocking reposts\");\n\n    const cleanupScript = document.createElement(\"script\");\n    cleanupScript.type = \"text/javascript\";\n    cleanupScript.id = \"cleanup-repost-blocker\";\n    cleanupScript.innerText = \"XMLHttpRequest.prototype.resetSend();\";\n\n    document.documentElement.appendChild(cleanupScript);\n\n    document.documentElement.removeChild(script);\n    document.documentElement.removeChild(cleanupScript);\n  }\n};\n\nconst handlePageLoaded = async () => {\n  logger.logInfo(\"handlePageLoaded executing...\");\n  observer = new DomObserver();\n\n  removeBuyLinks();\n\n  removeDownloadButtons();\n\n  addDownloadButtonToTrackPage();\n\n  addDownloadButtonToFeed();\n\n  // Add specific function for playlists/sets\n  addDownloadButtonToPlaylistPage();\n\n  observer.start(document.body);\n\n  logger.logInfo(\"Attached!\");\n};\n\n// Add this new function to explicitly handle playlists\nconst addDownloadButtonToPlaylistPage = () => {\n  logger.logInfo(\"[PlaylistPage] Running playlist button initialization\");\n\n  // Check if we're on a playlist/set page\n  const isPlaylistPage = window.location.pathname.includes(\"/sets/\") ||\n    window.location.pathname.includes(\"/albums/\") ||\n    document.querySelector(\".setTrackList\") !== null;\n\n  if (!isPlaylistPage) {\n    logger.logDebug(\"[PlaylistPage] Not on a playlist page, skipping\");\n    return;\n  }\n\n  logger.logInfo(\"[PlaylistPage] Detected playlist page, adding download button\");\n\n  // Try multiple potential targets for button placement\n  const possibleSelectors = [\n    // Track list header\n    \".soundActions .sc-button-group\",\n    // Header actions\n    \".soundHeader__actions .sc-button-group\",\n    // Like button container\n    \".sc-button-like\",\n    // Play button\n    \".playControls__play\",\n    // Set Actions\n    \".setActions .sc-button-group\"\n  ];\n\n  // Log all present elements we might try to use\n  for (const selector of possibleSelectors) {\n    const elements = document.querySelectorAll(selector);\n    logger.logDebug(`[PlaylistPage] Found ${elements.length} elements matching \"${selector}\"`);\n  }\n\n  // Try to find a suitable button parent from our selector options\n  let buttonParent = null;\n  for (const selector of possibleSelectors) {\n    const element = document.querySelector(selector);\n    if (element) {\n      buttonParent = element;\n      logger.logInfo(`[PlaylistPage] Found button parent: ${selector}`);\n      break;\n    }\n  }\n\n  // If we didn't find a button parent through direct selectors, try an alternative approach\n  if (!buttonParent) {\n    logger.logWarn(\"[PlaylistPage] No direct button parent found, trying alternative approach\");\n\n    // Find the main playlist container\n    const playlistContainer = document.querySelector(\".trackList\") ||\n      document.querySelector(\".setTrackList\");\n\n    if (playlistContainer) {\n      // Look for existing elements that we can insert before/after\n      const existingButton = document.querySelector(\".sc-button-like\") ||\n        document.querySelector(\".sc-button-share\") ||\n        document.querySelector(\".sc-button-play\");\n\n      if (existingButton && existingButton.parentNode) {\n        buttonParent = existingButton.parentNode;\n        logger.logInfo(\"[PlaylistPage] Found button parent via existing button\", buttonParent);\n      } else {\n        // Create our own button container if absolutely needed\n        const tracklistHeader = playlistContainer.querySelector(\".tracklistHeader\") ||\n          playlistContainer.querySelector(\".setTrackList__header\");\n\n        if (tracklistHeader) {\n          buttonParent = document.createElement(\"div\");\n          buttonParent.className = \"sc-button-group sc-button-group-medium\";\n          tracklistHeader.appendChild(buttonParent);\n          logger.logInfo(\"[PlaylistPage] Created custom button parent in tracklist header\");\n        }\n      }\n    }\n  }\n\n  if (buttonParent) {\n    // Get the URL of the current page (the playlist)\n    const downloadUrl = window.location.origin + window.location.pathname;\n    logger.logInfo(`[PlaylistPage] Creating download command for: ${downloadUrl}`);\n\n    // Create a command with explicit isSet flag\n    const command = createDownloadCommand(downloadUrl);\n    (command as any).isSet = true; // Force the isSet flag to true\n\n    logger.logInfo(\"[PlaylistPage] Adding download button to parent:\", buttonParent);\n    addDownloadButtonToParent(buttonParent, command, false);\n  } else {\n    logger.logError(\"[PlaylistPage] Could not find or create button parent for playlist page\");\n  }\n};\n\nconst documentState = document.readyState;\n\nif (documentState === \"complete\" || documentState === \"interactive\") {\n  setTimeout(handlePageLoaded, 0);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", handlePageLoaded);\n\n// Add a periodic check for stuck downloads that runs every 60 seconds\nlet stuckDownloadCheckInterval: number | null = null;\n\nfunction startStuckDownloadChecker() {\n  if (stuckDownloadCheckInterval !== null) {\n    clearInterval(stuckDownloadCheckInterval);\n  }\n\n  stuckDownloadCheckInterval = window.setInterval(() => {\n    const now = Date.now();\n    const activeDownloadIds = Object.keys(downloadButtons);\n\n    if (activeDownloadIds.length === 0) return;\n\n    logger.logDebug(`Running stuck download check for ${activeDownloadIds.length} active downloads`);\n\n    activeDownloadIds.forEach(downloadId => {\n      const buttonData = downloadButtons[downloadId];\n      if (!buttonData) return;\n\n      // We're only concerned with buttons that might be stuck in \"Downloading\" state\n      if (buttonData.state === \"Downloading\") {\n        const lastProgressTime = buttonData.lastProgressTime || 0;\n        const idleTime = now - lastProgressTime;\n\n        // If no progress updates for more than 5 minutes\n        if (idleTime > 300000) {\n          logger.logWarn(`Download ${downloadId} has been idle for ${Math.floor(idleTime / 1000)}s`);\n\n          // If download has been idle for more than 10 minutes, assume it completed\n          if (idleTime > 600000) {\n            logger.logInfo(`Auto-completing download ${downloadId} due to long inactivity (${Math.floor(idleTime / 1000)}s)`);\n\n            resetButtonBackground(buttonData.elem);\n            buttonData.elem.style.backgroundColor = \"#19a352\";\n            buttonData.elem.title = \"Download likely completed (auto-detected)\";\n            buttonData.elem.onclick = null;\n            buttonData.state = \"Downloaded\";\n\n            // Set timer to reset button to idle state\n            if (buttonData.resetTimer) {\n              clearTimeout(buttonData.resetTimer);\n            }\n            buttonData.resetTimer = window.setTimeout(() => runResetLogic(downloadId), 10000);\n          }\n          // If download has been idle for 5+ minutes but less than 10 minutes, update the text\n          else {\n            setButtonText(buttonData.elem, \"Downloading... (may be stuck)\");\n            buttonData.elem.title = `No progress for ${Math.floor(idleTime / 60000)} minutes. Click to pause/resume.`;\n          }\n        }\n      }\n    });\n  }, 60000); // Check every minute\n\n  logger.logInfo(\"Started automatic stuck download checker\");\n}\n\nfunction stopStuckDownloadChecker() {\n  if (stuckDownloadCheckInterval !== null) {\n    clearInterval(stuckDownloadCheckInterval);\n    stuckDownloadCheckInterval = null;\n    logger.logInfo(\"Stopped automatic stuck download checker\");\n  }\n}\n\nwindow.onbeforeunload = () => {\n  observer?.stop();\n  stopStuckDownloadChecker();\n  logger.logInfo(\"Unattached!\");\n};\n\n// Initialize stuck download checker along with other page initialization\nfunction initializeDownloadCheckers() {\n  startStuckDownloadChecker();\n}\n\n// Call to start the checker when page is loaded\nif (documentState === \"complete\" || documentState === \"interactive\") {\n  setTimeout(initializeDownloadCheckers, 1000); // Start slightly after main initialization\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setTimeout(initializeDownloadCheckers, 1000);\n});\n\nfunction writeConfigValueToLocalStorage(key: string, value: any) {\n  const item = JSON.stringify(value);\n\n  window.localStorage.setItem(\"SOUNDCLOUD-DL-\" + key, item);\n}\n\n// Removed direct loadConfiguration call. Configuration will be fetched from background.\nlogger.logInfo(\"[ContentScript] Requesting configuration from background script...\");\nloggedSendMessageToBackend({ type: \"GET_EXTENSION_CONFIG\" }, \"ContentScript_GetConfig\")\n  .then((loadedConfigFromBg: Partial<Record<keyof Config, { value: any }>>) => {\n    if (!loadedConfigFromBg) {\n      logger.logError(\"[ContentScript] Failed to load configuration from background script. Received undefined or null.\");\n      // Potentially use default values or show an error to the user\n      return;\n    }\n\n    logger.logInfo(\"[ContentScript] Configuration received from background:\", loadedConfigFromBg);\n\n    // Populate page's localStorage with non-secret values from the received config\n    for (const key of Object.keys(loadedConfigFromBg)) {\n      if (configKeys.includes(key as keyof Config)) {\n        const configKey = key as keyof Config;\n        // The received config from background should already be filtered for secrets,\n        // but we double-check or assume it's pre-filtered.\n        // The original `config` object from `utils/config` isn't fully populated here,\n        // so checking `config[configKey].secret` might be unreliable.\n        // We rely on the background script to only send non-secret values.\n        writeConfigValueToLocalStorage(configKey, loadedConfigFromBg[configKey]?.value);\n\n        // Directly update the value in the local 'config' object if needed for other functions.\n        // This is a tricky part, as `content.ts` doesn't \"own\" the config state.\n        // For now, we'll assume functions like `handleBlockRepostsConfigChange`\n        // will eventually be adapted or get values directly.\n      }\n    }\n\n    // Handle specific config actions, e.g., 'block-reposts'\n    const blockRepostsConfig = loadedConfigFromBg[\"block-reposts\"];\n    if (blockRepostsConfig && typeof blockRepostsConfig.value === \"boolean\") {\n      logger.logInfo(`[ContentScript] Setting up block-reposts based on received config: ${blockRepostsConfig.value}`);\n      handleBlockRepostsConfigChange(blockRepostsConfig.value);\n    } else {\n      logger.logWarn(\"[ContentScript] 'block-reposts' configuration not found or invalid in object from background.\");\n      // Optionally, apply a default behavior for block-reposts if not received\n      // handleBlockRepostsConfigChange(false); // Example: default to false\n    }\n\n    // TODO: Implement a mechanism for content.ts to react to ongoing config changes.\n    // This will likely involve the background script sending messages to content.ts\n    // when a config value it cares about is updated in the extension's storage.\n    // setOnConfigValueChanged(writeConfigValueToLocalStorage); // This was tied to the old direct load.\n    // registerConfigChangeHandler(\"block-reposts\", handleBlockRepostsConfigChange); // This also needs rethinking.\n\n    logger.logInfo(\"[ContentScript] Initial configuration applied.\");\n\n  }).catch(err => {\n    logger.logError(\"[ContentScript] Error requesting or processing configuration from background script:\", err);\n    // Fallback or error display logic if config loading fails\n    // For example, could try to load defaults for critical features or show a notification.\n    // As a minimal fallback for block-reposts:\n    // handleBlockRepostsConfigChange(false); // Default to not blocking if config fails\n  });\n\n// --- Function to create the pause/resume click handler ---\nconst createPauseResumeHandler = (downloadId: string): (() => Promise<void>) => {\n  return async () => {\n    const buttonData = downloadButtons[downloadId];\n    if (!buttonData) {\n      logger.logWarn(`Pause/Resume: Button data not found for downloadId: ${downloadId}`);\n      return;\n    }\n\n    if (!downloadId) { // Should not happen if buttonData was found, but as a safeguard\n      logger.logError(\"Attempted to send PAUSE/RESUME command with undefined/empty downloadId.\");\n      return;\n    }\n\n    // Current state of the button before this click action\n    const currentButtonState = buttonData.state;\n\n    if (currentButtonState === \"Downloading\" || currentButtonState === \"Resuming\") {\n      // Immediately update UI to \"Pausing...\" and set state\n      logger.logInfo(`[PAUSE_CLICK] User clicked Pause for ${downloadId}. Current state: ${currentButtonState}. Transitioning to Pausing.`);\n      setButtonText(buttonData.elem, \"Pausing...\");\n      buttonData.elem.style.cursor = \"default\"; // Indicate non-interactive while command is processed\n      buttonData.elem.onclick = null; // Prevent rapid re-clicks\n      buttonData.state = \"Pausing\";\n      buttonData.lastProgressTime = Date.now(); // Update time to reflect this action\n\n      await loggedSendMessageToBackend({ type: \"PAUSE_DOWNLOAD\", downloadId }, \"createPauseResumeHandler-Pause\");\n    } else if (currentButtonState === \"Paused\") {\n      // Immediately update UI to \"Resuming...\" and set state\n      logger.logInfo(`[RESUME_CLICK] User clicked Resume for ${downloadId}. Current state: ${currentButtonState}. Transitioning to Resuming.`);\n      setButtonText(buttonData.elem, \"Resuming...\");\n      buttonData.elem.style.cursor = \"default\"; // Indicate non-interactive\n      buttonData.elem.onclick = null; // Prevent rapid re-clicks\n      buttonData.state = \"Resuming\";\n      buttonData.lastProgressTime = Date.now(); // Update time\n\n      await loggedSendMessageToBackend({ type: \"RESUME_DOWNLOAD\", downloadId }, \"createPauseResumeHandler-Resume\");\n    } else {\n      logger.logWarn(`[PAUSE_RESUME_CLICK] Clicked on button for ${downloadId} but state is '${currentButtonState}', not Downloading/Resuming or Paused. No action taken.`);\n    }\n  };\n};\n\n// Define a function to run the reset logic for any download ID\nfunction runResetLogic(downloadId: string, newState: \"Idle\" | \"Error\" = \"Idle\") {\n  const buttonData = downloadButtons[downloadId];\n  if (!buttonData) return;\n\n  const { elem: downloadButton, onClick: originalOnClick } = buttonData;\n\n  // Start fade-out by resetting background\n  resetButtonBackground(downloadButton);\n  // After fade, reset text and handlers\n  setTimeout(() => {\n    if (downloadButtons[downloadId]) { // Check *again*\n      setButtonText(downloadButton, newState === \"Error\" ? \"ERROR\" : \"Download\");\n      downloadButton.title = newState === \"Error\" ? (\"Error occurred\") : \"Download\";\n      downloadButton.style.cursor = \"pointer\";\n      // Re-attach the *original* click handler, NOT the pause/resume one\n      downloadButton.onclick = originalOnClick;\n      downloadButtons[downloadId].state = newState === \"Error\" ? \"Error\" : \"Idle\";\n      // Only delete if fully reset to Idle, not if ending in Error state\n      if (newState === \"Idle\") {\n        delete downloadButtons[downloadId];\n      }\n    }\n  }, 500); // Delay matches CSS transition duration\n}\n\n// Add a debug function to periodically check the active downloads\nlet debugIntervalId: number | null = null;\n\nfunction startDebugLogging() {\n  if (debugIntervalId !== null) {\n    clearInterval(debugIntervalId);\n  }\n\n  debugIntervalId = window.setInterval(() => {\n    const activeDownloadIds = Object.keys(downloadButtons);\n    if (activeDownloadIds.length === 0) return;\n\n    logger.logDebug(`DEBUG: Currently tracking ${activeDownloadIds.length} active downloads`);\n\n    activeDownloadIds.forEach(downloadId => {\n      const buttonData = downloadButtons[downloadId];\n      if (!buttonData) return;\n\n      logger.logDebug(`DEBUG: Download ${downloadId} - State=${buttonData.state}, browserDownloadId=${buttonData.browserDownloadId || \"none\"}, lastProgress=${buttonData.lastProgressTime ? new Date(buttonData.lastProgressTime).toISOString() : \"none\"}`);\n    });\n  }, 10000); // Log every 10 seconds\n\n  logger.logInfo(\"Started debug logging for downloads\");\n}\n\n// Call to start the debug logger when page is loaded\nif (documentState === \"complete\" || documentState === \"interactive\") {\n  setTimeout(startDebugLogging, 2000); // Start after other initialization\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setTimeout(startDebugLogging, 2000);\n});\n"],"names":["buttonData"],"mappings":"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"}