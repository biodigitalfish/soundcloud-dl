{"version":3,"file":"content.js","sources":["../../../src/utils/domObserver.ts","../../../src/content.ts"],"sourcesContent":["import { Logger } from \"./logger\";\n\nexport interface ObserverEvent {\n  name?: string;\n  selector: string;\n  callback: (node: Element) => void;\n}\n\nexport class DomObserver {\n  private observer: MutationObserver;\n  private events: ObserverEvent[] = [];\n  private unqiueNodeId: number = 0;\n  private logger: Logger;\n\n  constructor() {\n    this.observer = new MutationObserver((mutations) => mutations.forEach((mutation) => this.handleMutation(mutation)));\n    this.logger = Logger.create(\"Observer\");\n  }\n\n  start(node: Node) {\n    this.observer.observe(node, { subtree: true, attributes: true, childList: true });\n\n    this.logger.logDebug(\"Started\");\n  }\n\n  stop() {\n    this.observer.disconnect();\n\n    this.logger.logDebug(\"Stopped\");\n  }\n\n  addEvent(event: ObserverEvent) {\n    if (!event.selector) {\n      this.logger.logWarn(\"Selector was not specified\");\n\n      return;\n    }\n\n    if (!event.callback) {\n      this.logger.logWarn(\"Callback was not specified\");\n\n      return;\n    }\n\n    this.events.push(event);\n\n    this.logger.logDebug(\"Event added\", event);\n  }\n\n  removeEvent(name: string) {\n    this.events = this.events.filter((event) => event.name !== name);\n  }\n\n  private handleMutation(mutation: MutationRecord) {\n    const target = mutation.target;\n    const newNodes = mutation.addedNodes ?? [];\n\n    for (const event of this.events) {\n      if (newNodes.length > 0) {\n        this.handleNodes(newNodes, event);\n      } else if (mutation.type === \"attributes\") {\n        this.handleNodes([target], event, false);\n      }\n    }\n  }\n\n  private handleNodes(nodes: any[] | NodeList, event: ObserverEvent, recursive: boolean = true) {\n    if (!nodes) return;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if (this.matchesSelectors(node, event.selector)) {\n        // We only want to emmit an event once\n        if (node._id !== undefined) return;\n\n        node._id = ++this.unqiueNodeId;\n        event.callback(node);\n      }\n\n      if (recursive && node.childNodes?.length > 0) this.handleNodes(node.childNodes, event);\n    }\n  }\n\n  private matchesSelectors(element: any, selectors: string) {\n    return element && element instanceof HTMLElement && element.matches(selectors);\n  }\n}\n","import { DomObserver, ObserverEvent } from \"./utils/domObserver\";\nimport { Logger } from \"./utils/logger\";\nimport { sendMessageToBackend, onMessage, getPathFromExtensionFile } from \"./compatibilityStubs\";\nimport { registerConfigChangeHandler, loadConfiguration, setOnConfigValueChanged, configKeys } from \"./utils/config\";\n\n// --- CSS for Range Modal ---\nconst modalCss = `\n  #scdl-range-modal {\n    display: none;\n    position: fixed;\n    z-index: 10000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0,0,0,0.6);\n  }\n  #scdl-range-modal-content {\n    background-color: #fefefe;\n    margin: 15% auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 80%;\n    max-width: 350px;\n    border-radius: 5px;\n    color: #333; /* Ensure text is visible */\n  }\n  #scdl-range-modal label {\n    display: block;\n    margin-bottom: 5px;\n  }\n  #scdl-range-modal input[type=\"number\"] {\n    width: 60px;\n    padding: 5px;\n    margin-bottom: 15px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n  }\n  #scdl-range-modal-actions button {\n    padding: 8px 15px;\n    margin-left: 10px;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n  }\n  #scdl-range-modal-download {\n    background-color: #ff5419;\n    color: white;\n  }\n  #scdl-range-modal-cancel {\n    background-color: #ccc;\n  }\n  #scdl-range-modal-error {\n    color: red;\n    font-size: 0.9em;\n    margin-top: 10px;\n    display: none; /* Hidden by default */\n  }\n  .sc-button-download {\n    transition: background-color 0.5s ease-out;\n  }\n`;\n// -------------------------\n\n// --- Modal HTML Structure ---\nlet modalElement: HTMLDivElement | null = null;\nfunction createModal() {\n  if (document.getElementById(\"scdl-range-modal\")) return;\n\n  const style = document.createElement(\"style\");\n  style.textContent = modalCss;\n  document.head.appendChild(style);\n\n  modalElement = document.createElement(\"div\");\n  modalElement.id = \"scdl-range-modal\";\n  modalElement.innerHTML = `\n    <div id=\"scdl-range-modal-content\">\n      <h4>Download Playlist Range</h4>\n      <label for=\"scdl-range-from\">From track:</label>\n      <input type=\"number\" id=\"scdl-range-from\" name=\"from\" min=\"1\" value=\"1\">\n      <label for=\"scdl-range-to\">To track:</label>\n      <input type=\"number\" id=\"scdl-range-to\" name=\"to\" min=\"1\" value=\"\"><br>\n      <small>(Leave \"To\" blank to download until the end)</small>\n      <div id=\"scdl-range-modal-error\"></div>\n      <div id=\"scdl-range-modal-actions\" style=\"text-align: right; margin-top: 15px;\">\n        <button id=\"scdl-range-modal-cancel\">Cancel</button>\n        <button id=\"scdl-range-modal-download\">Download Selection</button>\n      </div>\n    </div>\n  `;\n  document.body.appendChild(modalElement);\n\n  // Add listeners for the modal buttons\n  document.getElementById(\"scdl-range-modal-cancel\").addEventListener(\"click\", hideModal);\n  modalElement.addEventListener(\"click\", (e) => {\n    // Close if clicking outside the content\n    if (e.target === modalElement) {\n      hideModal();\n    }\n  });\n}\n\nfunction showModal(mainDownloadButton: HTMLButtonElement, onDownloadClick: (start: number, end: number | null) => void) {\n  if (!modalElement) createModal();\n\n  const fromInput = document.getElementById(\"scdl-range-from\") as HTMLInputElement;\n  const toInput = document.getElementById(\"scdl-range-to\") as HTMLInputElement;\n  const errorDiv = document.getElementById(\"scdl-range-modal-error\");\n\n  // Reset fields and error message\n  fromInput.value = \"1\";\n  toInput.value = \"\";\n  errorDiv.textContent = \"\";\n  errorDiv.style.display = \"none\";\n\n  // Remove previous listener and add new one to avoid duplicates / stale closures\n  const downloadBtn = document.getElementById(\"scdl-range-modal-download\");\n  const newDownloadBtn = downloadBtn.cloneNode(true) as HTMLButtonElement;\n  downloadBtn.parentNode.replaceChild(newDownloadBtn, downloadBtn);\n\n  newDownloadBtn.addEventListener(\"click\", () => {\n    const start = parseInt(fromInput.value, 10);\n    const endStr = toInput.value;\n    const end = endStr ? parseInt(endStr, 10) : null; // null means download to end\n\n    errorDiv.textContent = \"\"; // Clear previous error\n    errorDiv.style.display = \"none\";\n\n    if (isNaN(start) || start < 1) {\n      errorDiv.textContent = \"Invalid \\\"From\\\" number.\";\n      errorDiv.style.display = \"block\";\n      return;\n    }\n    if (end !== null && (isNaN(end) || end < start)) {\n      errorDiv.textContent = \"Invalid \\\"To\\\" number. Must be greater than or equal to \\\"From\\\".\";\n      errorDiv.style.display = \"block\";\n      return;\n    }\n\n    // Validation passed, call the provided handler\n    onDownloadClick(start, end);\n    hideModal();\n\n    // Trigger the main button's preparing state visually\n    setButtonText(mainDownloadButton, \"Preparing...\");\n    mainDownloadButton.style.cursor = \"default\";\n    mainDownloadButton.onclick = null;\n\n  });\n\n  modalElement.style.display = \"block\";\n}\n\nfunction hideModal() {\n  if (modalElement) {\n    modalElement.style.display = \"none\";\n  }\n}\n// -----------------------------\n\ninterface DownloadButton {\n  elem: HTMLButtonElement;\n  onClick: any;\n  state: \"Idle\" | \"Preparing\" | \"Downloading\" | \"Pausing\" | \"Paused\" | \"Resuming\" | \"Finishing\" | \"Downloaded\" | \"Error\";\n  resetTimer?: number;\n  originalUrl?: string; // Store the URL for resuming/pausing\n  lastProgressTime?: number; // Add timestamp for progress tracking\n  browserDownloadId?: number; // Store browser's numeric downloadId for matching\n}\n\ntype KeyedButtons = { [key: string]: DownloadButton & { resetTimer?: number } };\ntype OnButtonClicked = (downloadId: string) => Promise<any>;\n\nlet observer: DomObserver | null = null;\nconst logger = Logger.create(\"SoundCloud-Downloader\");\n\n// --- Wrapper for sendMessageToBackend to log messages ---\nconst originalSendMessageToBackend = sendMessageToBackend;\nconst loggedSendMessageToBackend = (message: any, callContext?: string): Promise<any> => {\n  // Use a deep clone for logging to avoid issues with complex objects or future modifications\n  let messageToLog = {};\n  try {\n    messageToLog = JSON.parse(JSON.stringify(message));\n  } catch (_e) {\n    // Fallback if JSON.stringify fails (e.g., circular refs, though unlikely for these messages)\n    messageToLog = { errorParsingMessage: true, originalType: message?.type };\n  }\n  logger.logDebug(`sendMessageToBackend CALLED [Context: ${callContext || \"Unknown\"}] Message:`, messageToLog);\n\n  // CRITICAL: Validate downloadId for messages requiring it\n  if (message && typeof message === \"object\") {\n    // Messages with these types MUST have a valid downloadId\n    const typesRequiringId = [\n      \"DOWNLOAD\", \"DOWNLOAD_SET\", \"DOWNLOAD_SET_RANGE\",\n      \"PAUSE_DOWNLOAD\", \"RESUME_DOWNLOAD\"\n    ];\n\n    if (typesRequiringId.includes(message.type) &&\n      (!message.downloadId || message.downloadId === undefined || message.downloadId === \"undefined\")) {\n      const error = new Error(`CRITICAL: Prevented sending message with type ${message.type} and missing downloadId!`);\n      logger.logError(error.message, { message: messageToLog, callContext });\n\n      // Return a rejected promise rather than allowing the invalid message to be sent\n      return Promise.reject(error);\n    }\n\n    // For all messages, add timestamp to help with matching in content script if needed\n    if (!message.timestamp) {\n      message.timestamp = Date.now();\n    }\n  }\n\n  // Safe to send the message\n  return originalSendMessageToBackend(message);\n};\n// --- End Wrapper ---\n\nconst downloadButtons: KeyedButtons = {};\n\nconst setButtonText = (button: HTMLButtonElement, text: string, title?: string) => {\n  button.innerText = text;\n\n  button.title = title ?? text;\n};\n\nconst resetButtonBackground = (button: HTMLButtonElement) => {\n  // Ensure styles are fully reset, important if paused state had specific colors\n  button.style.backgroundColor = \"\";\n  button.style.background = \"\";\n  button.style.color = \"\"; // Reset text color if changed\n};\n\nconst handleMessageFromBackgroundScript = async (_, message: any) => {\n  // --- UNCONDITIONAL ENTRY LOG ---\n  // Using logger.logError to ensure it appears regardless of LogLevel settings for DEBUG.\n  // If logger itself is the issue, this might still not show, then try console.error.\n  if (logger && typeof logger.logError === \"function\") {\n    logger.logError(\"[CONTENT_SCRIPT_RAW_MESSAGE_ENTRY] Message received:\", JSON.parse(JSON.stringify(message || { emptyMessage: true })));\n  } else {\n    // Fallback if logger isn't quite ready or misconfigured for some reason during early script execution\n    console.error(\"[CONTENT_SCRIPT_RAW_MESSAGE_ENTRY_CONSOLE_ERROR] Message received:\", JSON.parse(JSON.stringify(message || { emptyMessageForConsole: true })));\n  }\n  // --- END UNCONDITIONAL ENTRY LOG ---\n\n  // --- Early filter for irrelevant messages ---\n  const relevantKeys = [\n    \"downloadId\",\n    \"progress\",\n    \"error\",\n    \"status\",\n    \"browserDownloadId\",\n    \"originalDownloadId\", // This key is added by background script in some responses\n    \"completionWithoutId\",\n    \"completed\",\n    \"success\", // Key in ack messages from messageHandler\n    \"timestamp\" // Common key we add\n  ];\n  const messageKeys = Object.keys(message || {});\n  const isRelevantMessage = messageKeys.some(key => relevantKeys.includes(key));\n\n  if (!isRelevantMessage && messageKeys.length > 0) {\n    // More specific check for known irrelevant patterns if needed, e.g., if it has contextId but none of ours\n    if (message && (message.contextId || message.envType) && !messageKeys.some(k => [\"downloadId\", \"progress\", \"status\"].includes(k))) {\n      logger.logDebug(\"Discarding known irrelevant message (e.g., context menu click) early.\", { message });\n    } else {\n      logger.logDebug(\"Discarding message early as it lacks relevant download progress/ack keys.\", { message });\n    }\n    return true; // Acknowledge and ignore these messages\n  }\n  // --- End early filter ---\n\n  const { downloadId: receivedDownloadIdFromPayload, progress, error, status, completionWithoutId, completed, timestamp, browserDownloadId, originalDownloadId: originalIdFromPayload } = message;\n\n  // --- SUPER EARLY DEBUG ---\n  logger.logDebug(\"[CS_SUPER_EARLY_DEBUG] Relevant message payload for handleMessageFromBackgroundScript: \", JSON.parse(JSON.stringify(message)));\n  // --- END SUPER EARLY DEBUG ---\n\n  let finalDownloadId: string | undefined;\n\n  // Prioritize originalDownloadId if present (especially for early acks)\n  if (originalIdFromPayload) {\n    finalDownloadId = originalIdFromPayload;\n    logger.logDebug(`[CS_FID_LOGIC] finalDownloadId set from message.originalDownloadId: ${finalDownloadId}`);\n  } else if (receivedDownloadIdFromPayload) {\n    // Then try downloadId (our UUID, should be in progress/completion messages after heuristic)\n    finalDownloadId = receivedDownloadIdFromPayload;\n    logger.logDebug(`[CS_FID_LOGIC] finalDownloadId set from message.downloadId: ${finalDownloadId}`);\n  } else {\n    logger.logDebug(\"[CS_FID_LOGIC] Message has neither originalDownloadId nor downloadId at the top level of payload.\");\n  }\n\n  // Attempt to find the finalDownloadId using browserDownloadId if it wasn't found directly from payload ID fields\n  if (!finalDownloadId && browserDownloadId) {\n    const matchedDownloadIds = Object.keys(downloadButtons).filter(\n      id => downloadButtons[id].browserDownloadId === browserDownloadId\n    );\n\n    if (matchedDownloadIds.length === 1) {\n      finalDownloadId = matchedDownloadIds[0];\n      logger.logInfo(`Matched message with browserDownloadId=${browserDownloadId} to our finalDownloadId=${finalDownloadId}`);\n\n      if (progress === 101 || completed === true) {\n        const buttonData = downloadButtons[finalDownloadId!];\n        resetButtonBackground(buttonData.elem);\n        buttonData.elem.style.backgroundColor = \"#19a352\";\n        setButtonText(buttonData.elem, \"Downloaded!\");\n        buttonData.elem.title = \"Downloaded successfully (matched by browser downloadId)\";\n        buttonData.elem.onclick = null;\n        buttonData.state = \"Downloaded\";\n        buttonData.resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n        logger.logInfo(`Updated button ${finalDownloadId} to Downloaded state from browserDownloadId match`);\n        return true;\n      }\n    } else if (matchedDownloadIds.length > 1) {\n      logger.logWarn(`Found multiple (${matchedDownloadIds.length}) buttons with browserDownloadId=${browserDownloadId}. Cannot reliably map message.`);\n      // finalDownloadId remains undefined, will be caught by later checks\n    }\n  }\n\n  // If, after the above, we still don't have our finalDownloadId for the message, try to match to active downloads.\n  // This block handles cases where the ID was truly lost or it's a generic completion message.\n  if (!finalDownloadId || finalDownloadId === \"undefined_completion\" || completionWithoutId) {\n    // Log why this block is being entered\n    logger.logWarn(\n      \"[CS_GENERIC_MATCH_ENTRY] Entering generic/undefined ID matching. \" +\n      `finalDownloadId: ${finalDownloadId}, is_undefined_completion: ${finalDownloadId === \"undefined_completion\"}, ` +\n      `completionWithoutId flag: ${completionWithoutId}. Message payload:`, JSON.parse(JSON.stringify(message))\n    );\n\n    const allPotentiallyActiveStates = [\"Downloading\", \"Preparing\", \"Finishing\", \"Pausing\", \"Resuming\"];\n    const currentActiveDownloads = Object.keys(downloadButtons).filter(\n      id => allPotentiallyActiveStates.includes(downloadButtons[id].state)\n    );\n\n    // Define what a \"minimal\" message looks like (few keys, no substantive data)\n    // error is the destructured message.error. If message.error was undefined, error is undefined.\n    const isMinimalMessage = progress === undefined && // destructured from message\n      status === undefined && // destructured from message\n      completed !== true && // destructured from message\n      completionWithoutId !== true && // destructured from message\n      error === undefined && // destructured from message\n      typeof message === \"object\" &&\n      Object.keys(message).length <= (originalIdFromPayload ? 5 : (message.type ? 2 : 1));\n    // If no originalDownloadId: allow up to 2 keys if 'type' is present (type, timestamp), or 1 key (timestamp assumed)\n\n    if (currentActiveDownloads.length === 0 && isMinimalMessage) {\n      logger.logDebug(`Received minimal message (keys: ${Object.keys(message).join(\", \") || \"none\"}) with no active downloads. Discarding.`, { message });\n      return true; // Acknowledge and exit early\n    }\n\n    logger.logWarn(`Received message (keys: ${Object.keys(message).join(\", \") || \"none\"}) without a usable finalDownloadId or it is a generic completion. Attempting to match with active downloads (found ${currentActiveDownloads.length} using states: ${allPotentiallyActiveStates.join(\", \")}).`);\n\n    // Original isCompletionMessage heuristic (now named isCompletionMessageEvaluation)\n    const isCompletionMessageEvaluation = progress === 101 || progress === 102 ||\n      completed === true ||\n      completionWithoutId === true ||\n      (status === undefined &&\n        error === undefined && // destructured from message\n        typeof message === \"object\" &&\n        Object.keys(message).length <= (originalIdFromPayload ? 5 : 4));\n\n    if (isCompletionMessageEvaluation) {\n      // Use currentActiveDownloads which uses a comprehensive list of states.\n      const activeIdsForCompletionLogic = currentActiveDownloads;\n\n      logger.logInfo(`Attempting to match as completion message. Found ${activeIdsForCompletionLogic.length} candidates using states: ${allPotentiallyActiveStates.join(\", \")}.`);\n\n      if (activeIdsForCompletionLogic.length === 1) {\n        const matchedId = activeIdsForCompletionLogic[0];\n        logger.logInfo(`Matched undefined/generic ID message to single active download: ${matchedId}`);\n        finalDownloadId = matchedId;\n\n        const isActuallyComplete = progress === 101 || progress === 102 || completed === true || completionWithoutId === true;\n        if (isActuallyComplete) {\n          const buttonData = downloadButtons[finalDownloadId!];\n          resetButtonBackground(buttonData.elem);\n          buttonData.elem.style.backgroundColor = \"#19a352\";\n          setButtonText(buttonData.elem, \"Downloaded!\");\n          buttonData.elem.title = \"Downloaded successfully (auto-matched generic completion)\";\n          buttonData.elem.onclick = null;\n          buttonData.state = \"Downloaded\";\n          buttonData.resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n          logger.logInfo(`Updated button ${finalDownloadId} to Downloaded state from matched generic completion message.`);\n          return true;\n        }\n\n      } else if (activeIdsForCompletionLogic.length > 1 && timestamp) {\n        let mostRecentId = null;\n        let mostRecentTime = 0;\n        activeIdsForCompletionLogic.forEach(id => {\n          const lastTime = downloadButtons[id].lastProgressTime || 0;\n          if (lastTime > mostRecentTime) {\n            mostRecentTime = lastTime;\n            mostRecentId = id;\n          }\n        });\n\n        if (mostRecentId) {\n          logger.logInfo(`Matched undefined/generic ID to most recent active download by timestamp: ${mostRecentId}`);\n          finalDownloadId = mostRecentId;\n          const isActuallyComplete = progress === 101 || progress === 102 || completed === true || completionWithoutId === true;\n          if (isActuallyComplete) {\n            const buttonData = downloadButtons[finalDownloadId!];\n            resetButtonBackground(buttonData.elem);\n            buttonData.elem.style.backgroundColor = \"#19a352\";\n            setButtonText(buttonData.elem, \"Downloaded!\");\n            buttonData.elem.title = \"Downloaded successfully (auto-matched generic completion by timestamp)\";\n            buttonData.elem.onclick = null;\n            buttonData.state = \"Downloaded\";\n            buttonData.resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n            logger.logInfo(`Updated button ${finalDownloadId} to Downloaded state from timestamp-matched generic completion message.`);\n            return true;\n          }\n        } else {\n          logger.logWarn(`Found ${activeIdsForCompletionLogic.length} active downloads, but couldn't match generic completion message by timestamp.`);\n        }\n      } else if (activeIdsForCompletionLogic.length > 0) { // If length > 1 and no timestamp, or other non-matching scenarios with active downloads\n        logger.logWarn(`Found ${activeIdsForCompletionLogic.length} active downloads, can't match generic completion message reliably by unique or timestamp.`);\n      } else { // activeIdsForCompletionLogic.length === 0\n        logger.logInfo(\"No active downloads to match generic completion message to.\");\n      }\n    }\n    // If, after all the above, finalDownloadId is still not set\n    if (!finalDownloadId) {\n      // Check if it was the minimal message case that we would have debug-logged and returned for earlier\n      if (currentActiveDownloads.length === 0 && isMinimalMessage) {\n        // This condition implies the earlier 'return true' for minimal messages was somehow bypassed or conditions changed. Log as debug.\n        logger.logDebug(\"Could not determine finalDownloadId for minimal message (no active downloads) after matching attempts. Discarding.\", { message });\n      } else {\n        logger.logWarn(\"Could not determine finalDownloadId from undefined/generic ID message after all attempts. Discarding.\", { message });\n      }\n      return true;\n    }\n  }\n\n  // If after all attempts, finalDownloadId is STILL not set, we cannot proceed meaningfully.\n  if (!finalDownloadId) {\n    logger.logError(\"CRITICAL: finalDownloadId is null/undefined after all matching attempts. This should not happen. Discarding message.\", { message });\n    return true; // Or perhaps false, to indicate a problem.\n  }\n\n  const buttonData = downloadButtons[finalDownloadId!]; // Use non-null assertion as we should have a valid ID or returned early\n\n  if (!buttonData) {\n    logger.logWarn(`Button data not found for finalDownloadId: ${finalDownloadId}. Message:`, message);\n    return true;\n  }\n\n  const { elem: downloadButton, resetTimer, state: currentState } = buttonData;\n\n  // --- BEGIN DEBUG LOGGING for message.success block ---\n  // Log details if the message seems to be a success ack and matches the finalDownloadId\n  if (message.success === true && message.originalDownloadId === finalDownloadId) {\n    logger.logDebug(`[CS_DEBUG_ACK_INITIAL_MATCH] Early ack initial match for ${finalDownloadId}. Current button state: ${currentState}. Full Message:`, JSON.parse(JSON.stringify(message)));\n\n    if (currentState === \"Preparing\") {\n      logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] currentState is Preparing.\");\n      if (message.progress === undefined) {\n        logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] message.progress is undefined.\");\n        if (message.status === undefined) {\n          logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] message.status is undefined.\");\n          if (message.completed === undefined) {\n            logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] message.completed is undefined.\");\n            if (!message.error) {\n              logger.logDebug(\"[CS_DEBUG_ACK_CONDITIONS] !message.error is true. ALL PRE-CONDITIONS FOR STATE TRANSITION MET.\");\n            } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] !message.error FAILED. Error: ${message.error}`); }\n          } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] message.completed FAILED. Was: ${message.completed}`); }\n        } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] message.status FAILED. Was: ${message.status}`); }\n      } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] message.progress FAILED. Was: ${message.progress}`); }\n    } else { logger.logWarn(`[CS_DEBUG_ACK_FAIL_FINAL_BLOCK] currentState was NOT Preparing. Was: ${currentState}`); }\n  }\n  // --- END DEBUG LOGGING ---\n\n  if (browserDownloadId && !buttonData.browserDownloadId) {\n    logger.logInfo(`Storing browserDownloadId=${browserDownloadId} for our finalDownloadId=${finalDownloadId}`);\n    buttonData.browserDownloadId = browserDownloadId;\n  }\n\n  logger.logInfo(`Button state before update: ${currentState}, finalDownloadId=${finalDownloadId}`);\n\n  // Handle initial command success acknowledgement from background script\n  // This transitions from 'Preparing' to 'Downloading'\n  if (message.success === true && message.originalDownloadId === finalDownloadId &&\n    currentState === \"Preparing\" && // Ensure we are in Preparing state\n    message.progress === undefined && message.status === undefined && message.completed === undefined && !message.error) {\n\n    logger.logInfo(`Initial command success for ${finalDownloadId}. Transitioning to Downloading state.`);\n    setButtonText(downloadButton, \"Downloading... (Click to Pause)\");\n    downloadButton.style.background = \"linear-gradient(90deg, #ff5419 0%, transparent 0%)\"; // Initial progress 0%\n    downloadButton.style.cursor = \"pointer\";\n    downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    downloadButtons[finalDownloadId!].state = \"Downloading\"; // Update state here\n    downloadButtons[finalDownloadId!].lastProgressTime = Date.now(); // Mark time\n    // Note: We don't return here. If this ack message ALSO contained completion/progress, it will be handled by below blocks.\n  }\n\n  if (progress !== undefined || status !== undefined) {\n    downloadButtons[finalDownloadId!].lastProgressTime = Date.now();\n  }\n\n  if (resetTimer) {\n    clearTimeout(resetTimer);\n    downloadButtons[finalDownloadId!].resetTimer = undefined;\n  }\n\n  if (completed === true || message.finalBackup === true) {\n    logger.logInfo(`Download complete (explicit completion flag) for finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton);\n    downloadButton.style.backgroundColor = \"#19a352\";\n    setButtonText(downloadButton, \"Downloaded!\");\n    downloadButton.title = \"Downloaded successfully\";\n    downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Downloaded\";\n    downloadButtons[finalDownloadId!].resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n    logger.logInfo(`Button state updated to Downloaded due to explicit flag, finalDownloadId=${finalDownloadId}`);\n    return true;\n  } else if (progress === 101) {\n    logger.logInfo(`Download complete (101) for finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton);\n    downloadButton.style.backgroundColor = \"#19a352\";\n    setButtonText(downloadButton, \"Downloaded!\");\n    downloadButton.title = \"Downloaded successfully\";\n    downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Downloaded\";\n    downloadButtons[finalDownloadId!].resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n    logger.logInfo(`Button state updated to Downloaded, finalDownloadId=${finalDownloadId}`);\n    return true;\n  } else if (progress === 102) {\n    logger.logInfo(`Download complete with errors (102) for finalDownloadId=${finalDownloadId}`);\n    resetButtonBackground(downloadButton);\n    downloadButton.style.backgroundColor = \"gold\";\n    downloadButton.style.color = \"#333\";\n    setButtonText(downloadButton, \"Downloaded!\");\n    downloadButton.title = error || \"Some tracks failed to download\";\n    downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Downloaded\";\n    downloadButtons[finalDownloadId!].resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n    logger.logInfo(`Button state updated to Downloaded (with errors), finalDownloadId=${finalDownloadId}`);\n    return true;\n  }\n\n  if (status === \"Paused\") {\n    resetButtonBackground(downloadButton);\n    setButtonText(downloadButton, \"Paused (Click to Resume)\");\n    downloadButton.style.cursor = \"pointer\";\n    downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    downloadButtons[finalDownloadId!].state = \"Paused\";\n    logger.logInfo(`Button state updated to Paused, finalDownloadId=${finalDownloadId}`);\n  } else if (status === \"Resuming\") {\n    setButtonText(downloadButton, \"Resuming...\");\n    downloadButton.style.cursor = \"default\";\n    downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Resuming\";\n    logger.logInfo(`Button state updated to Resuming, finalDownloadId=${finalDownloadId}`);\n  } else if (progress === 100) {\n    if (currentState !== \"Paused\" && currentState !== \"Pausing\" && currentState !== \"Resuming\") {\n      setButtonText(downloadButton, \"Finishing...\");\n      downloadButton.style.background = \"linear-gradient(90deg, #ff5419 100%, transparent 0%)\";\n      downloadButton.onclick = null;\n      downloadButtons[finalDownloadId!].state = \"Finishing\";\n      logger.logInfo(`Button state updated to Finishing, finalDownloadId=${finalDownloadId}`);\n    }\n  } else if (progress !== undefined && progress >= 0 && progress < 100) {\n    if (currentState === \"Preparing\" || (currentState !== \"Paused\" && currentState !== \"Pausing\")) {\n      setButtonText(downloadButton, \"Downloading... (Click to Pause)\");\n      downloadButton.style.background = `linear-gradient(90deg, #ff5419 ${progress}%, transparent 0%)`;\n      downloadButton.style.cursor = \"pointer\";\n      downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n      downloadButtons[finalDownloadId!].state = \"Downloading\";\n      logger.logInfo(`Button state updated to Downloading (${progress}%), finalDownloadId=${finalDownloadId}`);\n    }\n  } else if (error) {\n    resetButtonBackground(downloadButton);\n    downloadButton.style.backgroundColor = \"#d30029\";\n    setButtonText(downloadButton, \"ERROR\", error);\n    downloadButton.onclick = null;\n    downloadButtons[finalDownloadId!].state = \"Error\";\n    logger.logInfo(`Button state updated to Error: ${error}, finalDownloadId=${finalDownloadId}`);\n  } else if (currentState === \"Preparing\" && progress !== undefined) {\n    // This case is a bit of a fallback if a download starts sending progress before a formal \"Downloading\" state was set\n    setButtonText(downloadButton, \"Downloading... (Click to Pause)\");\n    downloadButton.style.background = \"linear-gradient(90deg, #ff5419 \" + (progress || 0) + \"%, transparent 0%)\";\n    downloadButton.style.cursor = \"pointer\";\n    downloadButton.onclick = createPauseResumeHandler(finalDownloadId!);\n    downloadButtons[finalDownloadId!].state = \"Downloading\";\n    logger.logInfo(`Button state forcibly updated from Preparing to Downloading, finalDownloadId=${finalDownloadId}`);\n  } else if (currentState === \"Downloading\" && !progress && !status && !error) {\n    // Handle ambiguous messages when already in \"Downloading\" state\n    logger.logInfo(`Received ambiguous message for download ${finalDownloadId} in Downloading state`);\n    const messageStr = JSON.stringify(message).toLowerCase();\n    if (messageStr.includes(\"finish\") || messageStr.includes(\"complet\")) {\n      logger.logInfo(`Interpreting ambiguous message as completion for finalDownloadId=${finalDownloadId}`);\n      resetButtonBackground(downloadButton);\n      downloadButton.style.backgroundColor = \"#19a352\";\n      setButtonText(downloadButton, \"Downloaded!\");\n      downloadButton.title = \"Downloaded successfully\";\n      downloadButton.onclick = null;\n      downloadButtons[finalDownloadId!].state = \"Downloaded\";\n      downloadButtons[finalDownloadId!].resetTimer = window.setTimeout(() => runResetLogic(finalDownloadId!), 10000);\n    }\n  }\n\n  return true;\n};\n\n// Ensure logger is definitely initialized before use here\n// const logger = Logger.create(\"SoundCloud-Downloader-ListenerSetup\"); // Or use existing logger if in scope\n\nlogger.logError(\"[CONTENT_SCRIPT_LISTENER_SETUP] Attempting to set up onMessage listener NOW.\");\n\n// Reverting listener signature to (sender, message) based on previous successful linting with handleMessageFromBackgroundScript directly.\nconst scdlMessageListener = async (senderOrContext: chrome.runtime.MessageSender | any, messageOrPayload: any): Promise<any> => {\n  let actualPayload = messageOrPayload;\n  let actualSender = senderOrContext;\n\n  // Heuristic for Firefox MV2 where our payload might appear in the first argument (typically sender/context) \n  // when the second argument (typically message/payload) is a Firefox internal message.\n  // Or, if what we assume is the 'sender' (senderOrContext) actually contains our payload markers, \n  // and what we assume is 'message' (messageOrPayload) is the internal FF message.\n  if (messageOrPayload && (messageOrPayload.contextId || messageOrPayload.envType) &&\n    senderOrContext && (typeof (senderOrContext as any).downloadId !== \"undefined\" ||\n      typeof (senderOrContext as any).originalDownloadId !== \"undefined\" ||\n      typeof (senderOrContext as any).success !== \"undefined\" ||\n      typeof (senderOrContext as any).progress !== \"undefined\")) {\n\n    const logMessage = \"[CONTENT_SCRIPT_LISTENER_FIRED] Detected Firefox MV2 message misattribution. Using first argument (senderOrContext) as payload.\";\n    if (typeof logger !== \"undefined\" && logger && typeof logger.logError === \"function\") {\n      logger.logError(logMessage,\n        \"Original first arg (senderOrContext, now payload):\", JSON.parse(JSON.stringify(senderOrContext)),\n        \"Original second arg (messageOrPayload, now sender):\", JSON.parse(JSON.stringify(messageOrPayload)));\n    } else {\n      console.error(logMessage,\n        \"Original first arg (senderOrContext, now payload):\", JSON.parse(JSON.stringify(senderOrContext)),\n        \"Original second arg (messageOrPayload, now sender):\", JSON.parse(JSON.stringify(messageOrPayload)));\n    }\n    actualPayload = senderOrContext; // What was in sender is now our payload\n    actualSender = messageOrPayload as chrome.runtime.MessageSender; // The internal FF message becomes the sender (which handleMessageFromBackgroundScript ignores)\n  } else {\n    // Standard message receipt or our message came through correctly in the second argument\n    const logMessage = \"[CONTENT_SCRIPT_LISTENER_FIRED] Standard message processing.\";\n    if (typeof logger !== \"undefined\" && logger && typeof logger.logError === \"function\") {\n      logger.logError(logMessage, \"Arg1 (sender/context):\", JSON.parse(JSON.stringify(senderOrContext || {})), \"Arg2 (message/payload):\", JSON.parse(JSON.stringify(messageOrPayload || {})));\n    } else {\n      console.error(logMessage, \"Arg1 (sender/context):\", JSON.parse(JSON.stringify(senderOrContext || {})), \"Arg2 (message/payload):\", JSON.parse(JSON.stringify(messageOrPayload || {})));\n    }\n    // actualPayload is already messageOrPayload, actualSender is already senderOrContext\n  }\n\n  // Call the original handler. handleMessageFromBackgroundScript expects (anyIgnoredSender, actualMessagePayload).\n  return handleMessageFromBackgroundScript(actualSender, actualPayload);\n};\n\nonMessage(scdlMessageListener);\n\nlogger.logError(`[CONTENT_SCRIPT_LISTENER_SETUP] onMessage listener setup complete. Document readyState: ${document.readyState}`);\n\nconst createDownloadButton = (small?: boolean) => {\n  const button = document.createElement(\"button\");\n  const buttonSizeClass = small ? \"sc-button-small\" : \"sc-button-medium\";\n\n  button.className = `sc-button-download sc-button ${buttonSizeClass} sc-button-responsive`;\n  setButtonText(button, \"Download\");\n\n  return button;\n};\n\nconst createDownloadCommand = (url: string) => {\n  // Determine if the URL is for a playlist/set based on URL pattern\n  const isSetUrl = url.includes(\"/sets/\") || url.includes(\"/albums/\");\n\n  // DEBUG: Add extensive logging for playlist detection\n  logger.logDebug(`createDownloadCommand: URL=${url}, isSetUrl=${isSetUrl}`, { url, isSetUrl });\n\n  const command = (downloadId: string) => {\n    if (!downloadId) {\n      logger.logError(\"Attempted to send DOWNLOAD command with undefined/empty downloadId\", { url });\n      return Promise.reject(\"Undefined/empty downloadId for DOWNLOAD command\");\n    }\n    return loggedSendMessageToBackend({ // USE WRAPPER\n      type: isSetUrl ? \"DOWNLOAD_SET\" : \"DOWNLOAD\",\n      url,\n      downloadId,\n    }, \"createDownloadCommand\");\n  };\n\n  // Store the URL directly on the command function for use by the context menu\n  (command as any).url = url;\n  // Set the isSet flag to indicate if this is a set/playlist\n  (command as any).isSet = isSetUrl;\n\n  // DEBUG: Add verification log\n  logger.logDebug(`createDownloadCommand: Created command with isSet=${(command as any).isSet}`, { commandUrl: (command as any).url, isSet: (command as any).isSet });\n\n  return command;\n};\n\nconst addDownloadButtonToParent = (parent: Node & ParentNode, onClicked: OnButtonClicked & { url?: string; isSet?: boolean }, small?: boolean) => {\n  const downloadButtonExists = parent.querySelector(\"button.sc-button-download\") !== null;\n\n  if (downloadButtonExists) {\n    logger.logDebug(\"Download button already exists\");\n    return;\n  }\n\n  // Log the parent and the clicked URL details\n  logger.logDebug(\"Adding download button\", {\n    parentNode: parent.nodeName,\n    url: (onClicked as any).url,\n    isSet: (onClicked as any).isSet\n  });\n\n  const button = createDownloadButton(small);\n  const downloadUrl = (onClicked as any).url; // Store URL early to ensure it's available\n\n  // Debug URL to ensure it's correctly captured\n  logger.logInfo(`Button created with URL: ${downloadUrl}`);\n\n  const originalOnClick = async () => {\n    const downloadId: string = crypto.randomUUID();\n\n    // Store the button and URL information *immediately* when button is clicked\n    downloadButtons[downloadId] = {\n      elem: button,\n      onClick: originalOnClick, // Store self for potential reset\n      state: \"Preparing\",\n      originalUrl: downloadUrl, // Store URL needed for pause/resume context\n      lastProgressTime: Date.now() // Add timestamp for progress tracking\n    };\n\n    logger.logInfo(`Button clicked with downloadId: ${downloadId}, URL: ${downloadUrl}`);\n\n    button.style.cursor = \"default\";\n    button.onclick = null; // Disable direct click while preparing\n    setButtonText(button, \"Preparing...\");\n    resetButtonBackground(button); // Ensure clean background\n\n    // Add a safety timeout to reset button if we don't get progress updates\n    const safetyTimeout = setTimeout(() => {\n      const currentButtonData = downloadButtons[downloadId];\n      if (currentButtonData && currentButtonData.state === \"Preparing\") {\n        logger.logWarn(`Safety timeout triggered for downloadId=${downloadId}, button still in Preparing state`);\n        setButtonText(button, \"Click to retry\");\n        button.style.cursor = \"pointer\";\n        button.onclick = originalOnClick; // Re-enable click to let user retry\n        // Keep in download buttons but mark as idle\n        downloadButtons[downloadId].state = \"Idle\";\n      }\n    }, 10000); // 10 seconds safety timeout\n\n    // Add a completion safety timeout to prevent downloads from being stuck in Downloading state\n    // This needs to be much longer to account for large downloads\n    const completionTimeout = setTimeout(() => {\n      const currentButtonData = downloadButtons[downloadId];\n      if (currentButtonData && currentButtonData.state === \"Downloading\") {\n        const lastProgressTime = currentButtonData.lastProgressTime || 0;\n        const timeSinceLastProgress = Date.now() - lastProgressTime;\n\n        // If no progress updates for more than 2 minutes, consider it stuck\n        if (timeSinceLastProgress > 120000) { // 2 minutes\n          logger.logWarn(`Completion safety timeout triggered for downloadId=${downloadId}. Download seems stuck in Downloading state for ${timeSinceLastProgress / 1000}s`);\n\n          // Check if the download might have completed silently\n          if (timeSinceLastProgress > 180000) { // 3 minutes - assume potential completion\n            logger.logInfo(`Assuming potential silent completion for downloadId=${downloadId}`);\n            resetButtonBackground(button);\n            button.style.backgroundColor = \"#19a352\";\n            setButtonText(button, \"Downloaded!\");\n            button.title = \"Download likely completed (auto-detected)\";\n            button.onclick = null;\n            downloadButtons[downloadId].state = \"Downloaded\";\n            downloadButtons[downloadId].resetTimer = window.setTimeout(() => runResetLogic(downloadId), 10000);\n          } else {\n            // Just mark as potentially stuck but still downloading\n            logger.logInfo(`Marking download ${downloadId} as potentially stuck`);\n            setButtonText(button, \"Downloading... (may be stuck)\");\n          }\n        }\n      }\n    }, 300000); // 5 minutes timeout\n\n    // Execute the original download command (passed in as onClicked)\n    try {\n      const response = await onClicked(downloadId);\n      logger.logInfo(`Download command response for ${downloadId}:`, response);\n\n      // Clear safety timeout since we got a response\n      clearTimeout(safetyTimeout);\n\n      // Check if button is still in preparing state and update if needed\n      const currentButtonData = downloadButtons[downloadId];\n      if (currentButtonData && currentButtonData.state === \"Preparing\") {\n        logger.logInfo(`Manually transitioning button from Preparing to Downloading state for ${downloadId}`);\n        setButtonText(button, \"Downloading... (Click to Pause)\");\n        button.style.background = \"linear-gradient(90deg, #ff5419 0%, transparent 0%)\";\n        button.style.cursor = \"pointer\";\n        button.onclick = createPauseResumeHandler(downloadId);\n        downloadButtons[downloadId].state = \"Downloading\";\n        downloadButtons[downloadId].lastProgressTime = Date.now();\n      }\n    } catch (err) {\n      // Clear safety timeout since we got an error response\n      clearTimeout(safetyTimeout);\n      clearTimeout(completionTimeout);\n\n      logger.logError(`Initial download command failed for ${downloadUrl}`, err);\n      // Handle immediate failure case\n      if (downloadButtons[downloadId]) {\n        downloadButtons[downloadId].state = \"Error\";\n        setButtonText(button, \"ERROR\", err.message || \"Failed to start\");\n        button.style.backgroundColor = \"#d30029\";\n      }\n    }\n  };\n\n  // Add context menu for force redownload\n  button.oncontextmenu = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Remove any existing context menu\n    const existingMenu = document.getElementById(\"scdl-context-menu\");\n    if (existingMenu) document.body.removeChild(existingMenu);\n\n    // Create context menu\n    const menu = document.createElement(\"div\");\n    menu.id = \"scdl-context-menu\";\n    menu.style.position = \"absolute\";\n    menu.style.left = `${e.pageX}px`;\n    menu.style.top = `${e.pageY}px`;\n    menu.style.background = \"#fff\";\n    menu.style.boxShadow = \"0 2px 5px rgba(0,0,0,0.2)\";\n    menu.style.padding = \"5px 0\";\n    menu.style.borderRadius = \"3px\";\n    menu.style.zIndex = \"10000\";\n\n    document.body.appendChild(menu);\n\n    // Click elsewhere to dismiss\n    const dismissHandler = () => {\n      if (document.getElementById(\"scdl-context-menu\")) {\n        document.body.removeChild(menu);\n      }\n      document.removeEventListener(\"click\", dismissHandler);\n    };\n\n    document.addEventListener(\"click\", dismissHandler);\n\n    return false; // Prevent browser context menu\n  };\n\n  button.onclick = originalOnClick; // Assign the initial click handler\n\n  parent.appendChild(button);\n\n  // --- Add Range Button for Sets ---\n  const isSet = (onClicked as any).isSet;\n\n  // DEBUG: Add logging to verify isSet flag\n  logger.logInfo(\"Checking if should add range button:\", {\n    isSet,\n    url: (onClicked as any).url,\n    urlIncludes: {\n      sets: (onClicked as any).url?.includes(\"/sets/\"),\n      albums: (onClicked as any).url?.includes(\"/albums/\")\n    },\n    browserType: typeof browser !== \"undefined\" ? \"Firefox\" : \"Chrome\"\n  });\n\n  // Force isSet true for Firefox if URL contains /sets/ or /albums/\n  if (!isSet && typeof browser !== \"undefined\" && (onClicked as any).url) {\n    const url = (onClicked as any).url as string;\n    if (url.includes(\"/sets/\") || url.includes(\"/albums/\")) {\n      logger.logInfo(\"Firefox detected, forcing isSet=true for URL:\", url);\n      (onClicked as any).isSet = true;\n    }\n  }\n\n  // Re-check after potential Firefox fix\n  const finalIsSet = (onClicked as any).isSet;\n\n  if (finalIsSet) {\n    // ... (range button logic remains the same, but ensure it uses the main button's state for updates)\n    const rangeButton = document.createElement(\"button\");\n\n    // DEBUG: Log that we're creating a range button\n    logger.logInfo(\"Creating range button for URL=\" + ((onClicked as any).url || \"unknown\"));\n\n    const rangeButtonSizeClass = small ? \"sc-button-small\" : \"sc-button-medium\"; // Match size\n    rangeButton.className = `sc-button-range sc-button ${rangeButtonSizeClass} sc-button-responsive`;\n    rangeButton.textContent = \"Range...\";\n    rangeButton.title = \"Download a range of tracks\";\n    rangeButton.style.marginLeft = \"5px\"; // Add some space\n\n    rangeButton.onclick = (e) => {\n      e.preventDefault(); // Prevent form submission if inside one\n      e.stopPropagation(); // Prevent triggering other clicks\n\n      // IMPORTANT: Create a downloadId and store button info BEFORE opening the modal\n      const preDownloadId: string = crypto.randomUUID();\n\n      // Store the button with the URL information before the modal is even shown\n      downloadButtons[preDownloadId] = {\n        elem: button,\n        onClick: originalOnClick,\n        state: \"Idle\", // Not preparing yet until user confirms\n        originalUrl: downloadUrl, // Use the URL captured when the button was created\n        lastProgressTime: Date.now() // Add timestamp for progress tracking\n      };\n\n      logger.logInfo(`Range button clicked. Created preDownloadId: ${preDownloadId}, with URL: ${downloadUrl}`);\n\n      // Prepare the handler for the modal's Download button\n      const handleRangeDownload = (start: number, end: number | null) => {\n        // Use our pre-created downloadId instead of searching\n        const mainButtonId = preDownloadId;\n\n        logger.logInfo(`Range download handler called with start=${start}, end=${end}, mainButtonId=${mainButtonId}`);\n\n        const buttonData = downloadButtons[mainButtonId];\n\n        // Debug the buttonData to see what's available\n        logger.logInfo(\"Button data for range download:\", {\n          hasButtonData: !!buttonData,\n          originalUrl: buttonData?.originalUrl,\n          state: buttonData?.state\n        });\n\n        if (!buttonData || !buttonData.originalUrl) {\n          logger.logError(`Range download failed: No button data or URL for ID ${mainButtonId}`);\n          const errorDiv = document.getElementById(\"scdl-range-modal-error\");\n          if (errorDiv) {\n            errorDiv.textContent = \"Error: Could not get original URL for the playlist.\";\n            errorDiv.style.display = \"block\";\n          }\n          return;\n        }\n\n        // Update button text to \"Preparing...\"\n        setButtonText(buttonData.elem, \"Preparing...\");\n        buttonData.elem.style.cursor = \"default\";\n        buttonData.elem.onclick = null;\n        buttonData.state = \"Preparing\";\n        buttonData.lastProgressTime = Date.now();\n\n        // Add safety timeout for range downloads too\n        const safetyTimeout = setTimeout(() => {\n          if (downloadButtons[mainButtonId] && downloadButtons[mainButtonId].state === \"Preparing\") {\n            logger.logWarn(`Safety timeout triggered for range download with ID ${mainButtonId}`);\n            setButtonText(buttonData.elem, \"Range download timed out. Click to retry.\");\n            buttonData.elem.style.cursor = \"pointer\";\n            buttonData.elem.onclick = originalOnClick; // Allow retrying with regular download\n            downloadButtons[mainButtonId].state = \"Idle\";\n          }\n        }, 15000); // Slightly longer timeout for range downloads\n\n        // Add a completion safety timeout specifically for range downloads\n        // Since range downloads can take longer, we use a longer timeout\n        const completionTimeout = setTimeout(() => {\n          const currentButtonData = downloadButtons[mainButtonId];\n          if (currentButtonData && (currentButtonData.state === \"Downloading\" || currentButtonData.state === \"Preparing\")) {\n            const lastProgressTime = currentButtonData.lastProgressTime || 0;\n            const timeSinceLastProgress = Date.now() - lastProgressTime;\n\n            // If no progress updates for more than 5 minutes, consider it potentially stuck\n            if (timeSinceLastProgress > 300000) { // 5 minutes\n              logger.logWarn(`Range download completion safety timeout triggered for ID ${mainButtonId}. Download seems stuck for ${timeSinceLastProgress / 1000}s`);\n\n              // For range downloads, after 10 minutes, assume it might have completed silently\n              if (timeSinceLastProgress > 600000) { // 10 minutes\n                logger.logInfo(`Assuming potential silent completion for range download ${mainButtonId}`);\n                resetButtonBackground(buttonData.elem);\n                buttonData.elem.style.backgroundColor = \"#19a352\";\n                setButtonText(buttonData.elem, \"Downloaded!\");\n                buttonData.elem.title = \"Range download likely completed (auto-detected)\";\n                buttonData.elem.onclick = null;\n                downloadButtons[mainButtonId].state = \"Downloaded\";\n                downloadButtons[mainButtonId].resetTimer = window.setTimeout(() => runResetLogic(mainButtonId), 10000);\n              } else {\n                // Just mark as potentially stuck but still downloading\n                logger.logInfo(`Marking range download ${mainButtonId} as potentially stuck`);\n                setButtonText(buttonData.elem, \"Downloading range... (may be stuck)\");\n              }\n            }\n          }\n        }, 600000); // 10 minutes timeout for range downloads\n\n        // Log the message we're about to send\n        logger.logInfo(\"Sending range download message:\", {\n          type: \"DOWNLOAD_SET_RANGE\",\n          url: buttonData.originalUrl,\n          start,\n          end,\n          downloadId: mainButtonId\n        });\n\n        // Send the message with full logging\n        loggedSendMessageToBackend({\n          type: \"DOWNLOAD_SET_RANGE\",\n          url: buttonData.originalUrl,\n          start,\n          end,\n          downloadId: mainButtonId,\n        }, \"handleRangeDownload\").then(response => {\n          // Clear safety timeout on response\n          clearTimeout(safetyTimeout);\n\n          logger.logInfo(\"Range download response:\", response);\n\n          // Manually update button if still in Preparing state\n          if (downloadButtons[mainButtonId] && downloadButtons[mainButtonId].state === \"Preparing\") {\n            logger.logInfo(`Manually transitioning range button from Preparing to Downloading state for ${mainButtonId}`);\n            setButtonText(buttonData.elem, \"Downloading... (Click to Pause)\");\n            buttonData.elem.style.background = \"linear-gradient(90deg, #ff5419 0%, transparent 0%)\";\n            buttonData.elem.style.cursor = \"pointer\";\n            buttonData.elem.onclick = createPauseResumeHandler(mainButtonId);\n            downloadButtons[mainButtonId].state = \"Downloading\";\n            downloadButtons[mainButtonId].lastProgressTime = Date.now();\n          }\n        }).catch(error => {\n          // Clear safety timeout on error\n          clearTimeout(safetyTimeout);\n          clearTimeout(completionTimeout);\n\n          logger.logError(\"Range download request failed:\", error);\n\n          // Update button to error state\n          if (downloadButtons[mainButtonId]) {\n            resetButtonBackground(buttonData.elem);\n            buttonData.elem.style.backgroundColor = \"#d30029\";\n            setButtonText(buttonData.elem, \"ERROR\", error?.message || \"Range download failed\");\n            buttonData.elem.onclick = null;\n            downloadButtons[mainButtonId].state = \"Error\";\n          }\n        });\n      };\n\n      showModal(button, handleRangeDownload);\n    };\n    parent.appendChild(rangeButton);\n  }\n  // --------------------------------\n};\n\nconst removeElementFromParent = (element: Element) => {\n  element.parentNode.removeChild(element);\n};\n\nconst removeElementsMatchingSelectors = (selectors: string) => {\n  const elements = document.querySelectorAll(selectors);\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    removeElementFromParent(element);\n  }\n};\n\nconst removeBuyLinks = () => {\n  const selector = \"a.sc-buylink\";\n\n  removeElementsMatchingSelectors(selector);\n\n  const event: ObserverEvent = {\n    selector,\n    callback: (node) => removeElementFromParent(node),\n  };\n\n  observer?.addEvent(event);\n};\n\nconst removeDownloadButtons = () => {\n  removeElementsMatchingSelectors(\"button.sc-button-download\");\n};\n\nconst addDownloadButtonToTrackPage = () => {\n  const selector = \".sc-button-group-medium > .sc-button-like\";\n  logger.logDebug(`[TrackPage] Querying for selector: ${selector}`);\n\n  const addDownloadButtonToPossiblePlaylist = (node: Element) => {\n    logger.logDebug(\"[TrackPage] Found node matching selector:\", node);\n    const downloadUrl = window.location.origin + window.location.pathname;\n    const downloadCommand = createDownloadCommand(downloadUrl);\n    // Pass the downloadCommand which includes the isSet flag\n    addDownloadButtonToParent(node.parentNode, downloadCommand, false);\n  };\n\n  document.querySelectorAll(selector).forEach(addDownloadButtonToPossiblePlaylist);\n\n  const event: ObserverEvent = {\n    selector,\n    callback: addDownloadButtonToPossiblePlaylist,\n  };\n\n  observer?.addEvent(event);\n  logger.logDebug(`[TrackPage] Initial elements found: ${document.querySelectorAll(selector).length}`);\n};\n\nconst addDownloadButtonToFeed = () => {\n  const selector = \".sound.streamContext .sc-button-group > .sc-button-like\";\n  logger.logDebug(`[Feed] Querying for selector: ${selector}`);\n\n  const addDownloadButtonToPossiblePlaylist = (node: Element) => {\n    logger.logDebug(\"[Feed] Found node matching selector:\", node);\n    const soundBody = node.parentElement.closest(\".sound__body\");\n    const titleLink = soundBody.querySelector(\"a.soundTitle__title\");\n\n    if (titleLink === null) {\n      return;\n    }\n\n    const downloadUrl = window.location.origin + titleLink.getAttribute(\"href\");\n    const downloadCommand = createDownloadCommand(downloadUrl);\n    // Pass the downloadCommand which includes the isSet flag\n    addDownloadButtonToParent(node.parentNode, downloadCommand, true);\n  };\n\n  document.querySelectorAll(selector).forEach(addDownloadButtonToPossiblePlaylist);\n\n  const event: ObserverEvent = {\n    selector,\n    callback: addDownloadButtonToPossiblePlaylist,\n  };\n\n  observer?.addEvent(event);\n  logger.logDebug(`[Feed] Initial elements found: ${document.querySelectorAll(selector).length}`);\n};\n\nconst handleBlockRepostsConfigChange = (blockReposts: boolean) => {\n  let script = document.querySelector<HTMLScriptElement>(\"#repost-blocker\");\n\n  if (blockReposts) {\n    if (script) {\n      logger.logWarn(\"Repost-Blocker script has already been injected!\");\n\n      return;\n    }\n\n    const payloadFile = getPathFromExtensionFile(\"/js/repostBlocker.js\");\n\n    if (!payloadFile) return;\n\n    logger.logInfo(\"Start blocking reposts\");\n\n    script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.id = \"repost-blocker\";\n    script.src = payloadFile;\n\n    document.documentElement.appendChild(script);\n  } else {\n    if (!script) return;\n\n    logger.logInfo(\"Stop blocking reposts\");\n\n    const cleanupScript = document.createElement(\"script\");\n    cleanupScript.type = \"text/javascript\";\n    cleanupScript.id = \"cleanup-repost-blocker\";\n    cleanupScript.innerText = \"XMLHttpRequest.prototype.resetSend();\";\n\n    document.documentElement.appendChild(cleanupScript);\n\n    document.documentElement.removeChild(script);\n    document.documentElement.removeChild(cleanupScript);\n  }\n};\n\nconst handlePageLoaded = async () => {\n  logger.logInfo(\"handlePageLoaded executing...\");\n  observer = new DomObserver();\n\n  removeBuyLinks();\n\n  removeDownloadButtons();\n\n  addDownloadButtonToTrackPage();\n\n  addDownloadButtonToFeed();\n\n  // Add specific function for playlists/sets\n  addDownloadButtonToPlaylistPage();\n\n  observer.start(document.body);\n\n  logger.logInfo(\"Attached!\");\n};\n\n// Add this new function to explicitly handle playlists\nconst addDownloadButtonToPlaylistPage = () => {\n  logger.logInfo(\"[PlaylistPage] Running playlist button initialization\");\n\n  // Check if we're on a playlist/set page\n  const isPlaylistPage = window.location.pathname.includes(\"/sets/\") ||\n    window.location.pathname.includes(\"/albums/\") ||\n    document.querySelector(\".setTrackList\") !== null;\n\n  if (!isPlaylistPage) {\n    logger.logDebug(\"[PlaylistPage] Not on a playlist page, skipping\");\n    return;\n  }\n\n  logger.logInfo(\"[PlaylistPage] Detected playlist page, adding download button\");\n\n  // Try multiple potential targets for button placement\n  const possibleSelectors = [\n    // Track list header\n    \".soundActions .sc-button-group\",\n    // Header actions\n    \".soundHeader__actions .sc-button-group\",\n    // Like button container\n    \".sc-button-like\",\n    // Play button\n    \".playControls__play\",\n    // Set Actions\n    \".setActions .sc-button-group\"\n  ];\n\n  // Log all present elements we might try to use\n  for (const selector of possibleSelectors) {\n    const elements = document.querySelectorAll(selector);\n    logger.logDebug(`[PlaylistPage] Found ${elements.length} elements matching \"${selector}\"`);\n  }\n\n  // Try to find a suitable button parent from our selector options\n  let buttonParent = null;\n  for (const selector of possibleSelectors) {\n    const element = document.querySelector(selector);\n    if (element) {\n      buttonParent = element;\n      logger.logInfo(`[PlaylistPage] Found button parent: ${selector}`);\n      break;\n    }\n  }\n\n  // If we didn't find a button parent through direct selectors, try an alternative approach\n  if (!buttonParent) {\n    logger.logWarn(\"[PlaylistPage] No direct button parent found, trying alternative approach\");\n\n    // Find the main playlist container\n    const playlistContainer = document.querySelector(\".trackList\") ||\n      document.querySelector(\".setTrackList\");\n\n    if (playlistContainer) {\n      // Look for existing elements that we can insert before/after\n      const existingButton = document.querySelector(\".sc-button-like\") ||\n        document.querySelector(\".sc-button-share\") ||\n        document.querySelector(\".sc-button-play\");\n\n      if (existingButton && existingButton.parentNode) {\n        buttonParent = existingButton.parentNode;\n        logger.logInfo(\"[PlaylistPage] Found button parent via existing button\", buttonParent);\n      } else {\n        // Create our own button container if absolutely needed\n        const tracklistHeader = playlistContainer.querySelector(\".tracklistHeader\") ||\n          playlistContainer.querySelector(\".setTrackList__header\");\n\n        if (tracklistHeader) {\n          buttonParent = document.createElement(\"div\");\n          buttonParent.className = \"sc-button-group sc-button-group-medium\";\n          tracklistHeader.appendChild(buttonParent);\n          logger.logInfo(\"[PlaylistPage] Created custom button parent in tracklist header\");\n        }\n      }\n    }\n  }\n\n  if (buttonParent) {\n    // Get the URL of the current page (the playlist)\n    const downloadUrl = window.location.origin + window.location.pathname;\n    logger.logInfo(`[PlaylistPage] Creating download command for: ${downloadUrl}`);\n\n    // Create a command with explicit isSet flag\n    const command = createDownloadCommand(downloadUrl);\n    (command as any).isSet = true; // Force the isSet flag to true\n\n    logger.logInfo(\"[PlaylistPage] Adding download button to parent:\", buttonParent);\n    addDownloadButtonToParent(buttonParent, command, false);\n  } else {\n    logger.logError(\"[PlaylistPage] Could not find or create button parent for playlist page\");\n  }\n};\n\nconst documentState = document.readyState;\n\nif (documentState === \"complete\" || documentState === \"interactive\") {\n  setTimeout(handlePageLoaded, 0);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", handlePageLoaded);\n\n// Add a periodic check for stuck downloads that runs every 60 seconds\nlet stuckDownloadCheckInterval: number | null = null;\n\nfunction startStuckDownloadChecker() {\n  if (stuckDownloadCheckInterval !== null) {\n    clearInterval(stuckDownloadCheckInterval);\n  }\n\n  stuckDownloadCheckInterval = window.setInterval(() => {\n    const now = Date.now();\n    const activeDownloadIds = Object.keys(downloadButtons);\n\n    if (activeDownloadIds.length === 0) return;\n\n    logger.logDebug(`Running stuck download check for ${activeDownloadIds.length} active downloads`);\n\n    activeDownloadIds.forEach(downloadId => {\n      const buttonData = downloadButtons[downloadId];\n      if (!buttonData) return;\n\n      // We're only concerned with buttons that might be stuck in \"Downloading\" state\n      if (buttonData.state === \"Downloading\") {\n        const lastProgressTime = buttonData.lastProgressTime || 0;\n        const idleTime = now - lastProgressTime;\n\n        // If no progress updates for more than 5 minutes\n        if (idleTime > 300000) {\n          logger.logWarn(`Download ${downloadId} has been idle for ${Math.floor(idleTime / 1000)}s`);\n\n          // If download has been idle for more than 10 minutes, assume it completed\n          if (idleTime > 600000) {\n            logger.logInfo(`Auto-completing download ${downloadId} due to long inactivity (${Math.floor(idleTime / 1000)}s)`);\n\n            resetButtonBackground(buttonData.elem);\n            buttonData.elem.style.backgroundColor = \"#19a352\";\n            setButtonText(buttonData.elem, \"Downloaded!\");\n            buttonData.elem.title = \"Download likely completed (auto-detected)\";\n            buttonData.elem.onclick = null;\n            buttonData.state = \"Downloaded\";\n\n            // Set timer to reset button to idle state\n            if (buttonData.resetTimer) {\n              clearTimeout(buttonData.resetTimer);\n            }\n            buttonData.resetTimer = window.setTimeout(() => runResetLogic(downloadId), 10000);\n          }\n          // If download has been idle for 5+ minutes but less than 10 minutes, update the text\n          else {\n            setButtonText(buttonData.elem, \"Downloading... (may be stuck)\");\n            buttonData.elem.title = `No progress for ${Math.floor(idleTime / 60000)} minutes. Click to pause/resume.`;\n          }\n        }\n      }\n    });\n  }, 60000); // Check every minute\n\n  logger.logInfo(\"Started automatic stuck download checker\");\n}\n\nfunction stopStuckDownloadChecker() {\n  if (stuckDownloadCheckInterval !== null) {\n    clearInterval(stuckDownloadCheckInterval);\n    stuckDownloadCheckInterval = null;\n    logger.logInfo(\"Stopped automatic stuck download checker\");\n  }\n}\n\nwindow.onbeforeunload = () => {\n  observer?.stop();\n  stopStuckDownloadChecker();\n  logger.logDebug(\"Unattached!\");\n};\n\n// Initialize stuck download checker along with other page initialization\nfunction initializeDownloadCheckers() {\n  startStuckDownloadChecker();\n}\n\n// Call to start the checker when page is loaded\nif (documentState === \"complete\" || documentState === \"interactive\") {\n  setTimeout(initializeDownloadCheckers, 1000); // Start slightly after main initialization\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setTimeout(initializeDownloadCheckers, 1000);\n});\n\nfunction writeConfigValueToLocalStorage(key: string, value: any) {\n  const item = JSON.stringify(value);\n\n  window.localStorage.setItem(\"SOUNDCLOUD-DL-\" + key, item);\n}\n\nloadConfiguration(true).then((config) => {\n  for (const key of configKeys) {\n    if (config[key].secret) continue;\n\n    writeConfigValueToLocalStorage(key, config[key].value);\n  }\n\n  setOnConfigValueChanged(writeConfigValueToLocalStorage);\n\n  if (config[\"block-reposts\"].value) handleBlockRepostsConfigChange(true);\n\n  registerConfigChangeHandler(\"block-reposts\", handleBlockRepostsConfigChange);\n});\n\n// --- Function to create the pause/resume click handler ---\nconst createPauseResumeHandler = (downloadId: string): (() => Promise<void>) => {\n  return async () => {\n    const buttonData = downloadButtons[downloadId];\n    if (!buttonData) {\n      logger.logWarn(`Pause/Resume: Button data not found for downloadId: ${downloadId}`);\n      return;\n    }\n\n    if (!downloadId) { // Should not happen if buttonData was found, but as a safeguard\n      logger.logError(\"Attempted to send PAUSE/RESUME command with undefined/empty downloadId.\");\n      return;\n    }\n\n    if (buttonData.state === \"Downloading\" || buttonData.state === \"Resuming\") {\n      setButtonText(buttonData.elem, \"Pausing...\");\n      buttonData.state = \"Pausing\";\n      await loggedSendMessageToBackend({ type: \"PAUSE_DOWNLOAD\", downloadId }, \"createPauseResumeHandler-Pause\"); // USE WRAPPER\n    } else if (buttonData.state === \"Paused\") {\n      setButtonText(buttonData.elem, \"Resuming...\");\n      buttonData.state = \"Resuming\";\n      await loggedSendMessageToBackend({ type: \"RESUME_DOWNLOAD\", downloadId }, \"createPauseResumeHandler-Resume\"); // USE WRAPPER\n    }\n  };\n};\n\n// Define a function to run the reset logic for any download ID\nfunction runResetLogic(downloadId: string, newState: \"Idle\" | \"Error\" = \"Idle\") {\n  const buttonData = downloadButtons[downloadId];\n  if (!buttonData) return;\n\n  const { elem: downloadButton, onClick: originalOnClick } = buttonData;\n\n  // Start fade-out by resetting background\n  resetButtonBackground(downloadButton);\n  // After fade, reset text and handlers\n  setTimeout(() => {\n    if (downloadButtons[downloadId]) { // Check *again*\n      setButtonText(downloadButton, newState === \"Error\" ? \"ERROR\" : \"Download\");\n      downloadButton.title = newState === \"Error\" ? (\"Error occurred\") : \"Download\";\n      downloadButton.style.cursor = \"pointer\";\n      // Re-attach the *original* click handler, NOT the pause/resume one\n      downloadButton.onclick = originalOnClick;\n      downloadButtons[downloadId].state = newState === \"Error\" ? \"Error\" : \"Idle\";\n      // Only delete if fully reset to Idle, not if ending in Error state\n      if (newState === \"Idle\") {\n        delete downloadButtons[downloadId];\n      }\n    }\n  }, 500); // Delay matches CSS transition duration\n}\n\n// Add a debug function to periodically check the active downloads\nlet debugIntervalId: number | null = null;\n\nfunction startDebugLogging() {\n  if (debugIntervalId !== null) {\n    clearInterval(debugIntervalId);\n  }\n\n  debugIntervalId = window.setInterval(() => {\n    const activeDownloadIds = Object.keys(downloadButtons);\n    if (activeDownloadIds.length === 0) return;\n\n    logger.logDebug(`DEBUG: Currently tracking ${activeDownloadIds.length} active downloads`);\n\n    activeDownloadIds.forEach(downloadId => {\n      const buttonData = downloadButtons[downloadId];\n      if (!buttonData) return;\n\n      logger.logDebug(`DEBUG: Download ${downloadId} - State=${buttonData.state}, browserDownloadId=${buttonData.browserDownloadId || \"none\"}, lastProgress=${buttonData.lastProgressTime ? new Date(buttonData.lastProgressTime).toISOString() : \"none\"}`);\n    });\n  }, 10000); // Log every 10 seconds\n\n  logger.logInfo(\"Started debug logging for downloads\");\n}\n\n// Call to start the debug logger when page is loaded\nif (documentState === \"complete\" || documentState === \"interactive\") {\n  setTimeout(startDebugLogging, 2000); // Start after other initialization\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setTimeout(startDebugLogging, 2000);\n});\n"],"names":["buttonData"],"mappings":"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"}